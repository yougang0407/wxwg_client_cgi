/* soapH.h
   Generated by gSOAP 2.8.71 for user.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byte
#define soap_PATCH_byte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_int
#define soap_PATCH_int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Fault
#define soap_PATCH_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Reason
#define soap_PATCH_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Code
#define soap_PATCH_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Header
#define soap_PATCH_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE_ns1__synAuthList_DEFINED
#define SOAP_TYPE_ns1__synAuthList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__synAuthList(struct soap*, struct ns1__synAuthList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__synAuthList(struct soap*, const struct ns1__synAuthList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__synAuthList(struct soap*, const char*, int, const struct ns1__synAuthList *, const char*);
SOAP_FMAC3 struct ns1__synAuthList * SOAP_FMAC4 soap_in_ns1__synAuthList(struct soap*, const char*, struct ns1__synAuthList *, const char*);

SOAP_FMAC3 struct ns1__synAuthList * SOAP_FMAC4 soap_new_ns1__synAuthList(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__synAuthList(struct soap*, const struct ns1__synAuthList *, const char*, const char*);

#ifndef soap_write_ns1__synAuthList
#define soap_write_ns1__synAuthList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__synAuthList(soap, data), 0) || soap_put_ns1__synAuthList(soap, data, "ns1:synAuthList", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__synAuthList
#define soap_PUT_ns1__synAuthList(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__synAuthList(soap, data), 0) || soap_put_ns1__synAuthList(soap, data, "ns1:synAuthList", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__synAuthList
#define soap_PATCH_ns1__synAuthList(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__synAuthList(soap, data), 0) || soap_put_ns1__synAuthList(soap, data, "ns1:synAuthList", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__synAuthList
#define soap_POST_send_ns1__synAuthList(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__synAuthList(soap, data), 0) || soap_put_ns1__synAuthList(soap, data, "ns1:synAuthList", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__synAuthList * SOAP_FMAC4 soap_get_ns1__synAuthList(struct soap*, struct ns1__synAuthList *, const char*, const char*);

#ifndef soap_read_ns1__synAuthList
#define soap_read_ns1__synAuthList(soap, data) ( ((data) ? (soap_default_ns1__synAuthList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__synAuthList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__synAuthList
#define soap_GET_ns1__synAuthList(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__synAuthList(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__synAuthList
#define soap_POST_recv_ns1__synAuthList(soap, data) ( soap_read_ns1__synAuthList(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__synAuthListResponse_DEFINED
#define SOAP_TYPE_ns1__synAuthListResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__synAuthListResponse(struct soap*, struct ns1__synAuthListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__synAuthListResponse(struct soap*, const struct ns1__synAuthListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__synAuthListResponse(struct soap*, const char*, int, const struct ns1__synAuthListResponse *, const char*);
SOAP_FMAC3 struct ns1__synAuthListResponse * SOAP_FMAC4 soap_in_ns1__synAuthListResponse(struct soap*, const char*, struct ns1__synAuthListResponse *, const char*);

SOAP_FMAC3 struct ns1__synAuthListResponse * SOAP_FMAC4 soap_new_ns1__synAuthListResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__synAuthListResponse(struct soap*, const struct ns1__synAuthListResponse *, const char*, const char*);

#ifndef soap_write_ns1__synAuthListResponse
#define soap_write_ns1__synAuthListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__synAuthListResponse(soap, data), 0) || soap_put_ns1__synAuthListResponse(soap, data, "ns1:synAuthListResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__synAuthListResponse
#define soap_PUT_ns1__synAuthListResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__synAuthListResponse(soap, data), 0) || soap_put_ns1__synAuthListResponse(soap, data, "ns1:synAuthListResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__synAuthListResponse
#define soap_PATCH_ns1__synAuthListResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__synAuthListResponse(soap, data), 0) || soap_put_ns1__synAuthListResponse(soap, data, "ns1:synAuthListResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__synAuthListResponse
#define soap_POST_send_ns1__synAuthListResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__synAuthListResponse(soap, data), 0) || soap_put_ns1__synAuthListResponse(soap, data, "ns1:synAuthListResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__synAuthListResponse * SOAP_FMAC4 soap_get_ns1__synAuthListResponse(struct soap*, struct ns1__synAuthListResponse *, const char*, const char*);

#ifndef soap_read_ns1__synAuthListResponse
#define soap_read_ns1__synAuthListResponse(soap, data) ( ((data) ? (soap_default_ns1__synAuthListResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__synAuthListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__synAuthListResponse
#define soap_GET_ns1__synAuthListResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__synAuthListResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__synAuthListResponse
#define soap_POST_recv_ns1__synAuthListResponse(soap, data) ( soap_read_ns1__synAuthListResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__dicDataGet_DEFINED
#define SOAP_TYPE_ns1__dicDataGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__dicDataGet(struct soap*, struct ns1__dicDataGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__dicDataGet(struct soap*, const struct ns1__dicDataGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dicDataGet(struct soap*, const char*, int, const struct ns1__dicDataGet *, const char*);
SOAP_FMAC3 struct ns1__dicDataGet * SOAP_FMAC4 soap_in_ns1__dicDataGet(struct soap*, const char*, struct ns1__dicDataGet *, const char*);

SOAP_FMAC3 struct ns1__dicDataGet * SOAP_FMAC4 soap_new_ns1__dicDataGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__dicDataGet(struct soap*, const struct ns1__dicDataGet *, const char*, const char*);

#ifndef soap_write_ns1__dicDataGet
#define soap_write_ns1__dicDataGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__dicDataGet(soap, data), 0) || soap_put_ns1__dicDataGet(soap, data, "ns1:dicDataGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__dicDataGet
#define soap_PUT_ns1__dicDataGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__dicDataGet(soap, data), 0) || soap_put_ns1__dicDataGet(soap, data, "ns1:dicDataGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__dicDataGet
#define soap_PATCH_ns1__dicDataGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__dicDataGet(soap, data), 0) || soap_put_ns1__dicDataGet(soap, data, "ns1:dicDataGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__dicDataGet
#define soap_POST_send_ns1__dicDataGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__dicDataGet(soap, data), 0) || soap_put_ns1__dicDataGet(soap, data, "ns1:dicDataGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__dicDataGet * SOAP_FMAC4 soap_get_ns1__dicDataGet(struct soap*, struct ns1__dicDataGet *, const char*, const char*);

#ifndef soap_read_ns1__dicDataGet
#define soap_read_ns1__dicDataGet(soap, data) ( ((data) ? (soap_default_ns1__dicDataGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__dicDataGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__dicDataGet
#define soap_GET_ns1__dicDataGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__dicDataGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__dicDataGet
#define soap_POST_recv_ns1__dicDataGet(soap, data) ( soap_read_ns1__dicDataGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__dicDataGetResponse_DEFINED
#define SOAP_TYPE_ns1__dicDataGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__dicDataGetResponse(struct soap*, struct ns1__dicDataGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__dicDataGetResponse(struct soap*, const struct ns1__dicDataGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dicDataGetResponse(struct soap*, const char*, int, const struct ns1__dicDataGetResponse *, const char*);
SOAP_FMAC3 struct ns1__dicDataGetResponse * SOAP_FMAC4 soap_in_ns1__dicDataGetResponse(struct soap*, const char*, struct ns1__dicDataGetResponse *, const char*);

SOAP_FMAC3 struct ns1__dicDataGetResponse * SOAP_FMAC4 soap_new_ns1__dicDataGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__dicDataGetResponse(struct soap*, const struct ns1__dicDataGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__dicDataGetResponse
#define soap_write_ns1__dicDataGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__dicDataGetResponse(soap, data), 0) || soap_put_ns1__dicDataGetResponse(soap, data, "ns1:dicDataGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__dicDataGetResponse
#define soap_PUT_ns1__dicDataGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__dicDataGetResponse(soap, data), 0) || soap_put_ns1__dicDataGetResponse(soap, data, "ns1:dicDataGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__dicDataGetResponse
#define soap_PATCH_ns1__dicDataGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__dicDataGetResponse(soap, data), 0) || soap_put_ns1__dicDataGetResponse(soap, data, "ns1:dicDataGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__dicDataGetResponse
#define soap_POST_send_ns1__dicDataGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__dicDataGetResponse(soap, data), 0) || soap_put_ns1__dicDataGetResponse(soap, data, "ns1:dicDataGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__dicDataGetResponse * SOAP_FMAC4 soap_get_ns1__dicDataGetResponse(struct soap*, struct ns1__dicDataGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__dicDataGetResponse
#define soap_read_ns1__dicDataGetResponse(soap, data) ( ((data) ? (soap_default_ns1__dicDataGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__dicDataGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__dicDataGetResponse
#define soap_GET_ns1__dicDataGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__dicDataGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__dicDataGetResponse
#define soap_POST_recv_ns1__dicDataGetResponse(soap, data) ( soap_read_ns1__dicDataGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__unitListGet_DEFINED
#define SOAP_TYPE_ns1__unitListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__unitListGet(struct soap*, struct ns1__unitListGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__unitListGet(struct soap*, const struct ns1__unitListGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unitListGet(struct soap*, const char*, int, const struct ns1__unitListGet *, const char*);
SOAP_FMAC3 struct ns1__unitListGet * SOAP_FMAC4 soap_in_ns1__unitListGet(struct soap*, const char*, struct ns1__unitListGet *, const char*);

SOAP_FMAC3 struct ns1__unitListGet * SOAP_FMAC4 soap_new_ns1__unitListGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__unitListGet(struct soap*, const struct ns1__unitListGet *, const char*, const char*);

#ifndef soap_write_ns1__unitListGet
#define soap_write_ns1__unitListGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__unitListGet(soap, data), 0) || soap_put_ns1__unitListGet(soap, data, "ns1:unitListGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__unitListGet
#define soap_PUT_ns1__unitListGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__unitListGet(soap, data), 0) || soap_put_ns1__unitListGet(soap, data, "ns1:unitListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__unitListGet
#define soap_PATCH_ns1__unitListGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__unitListGet(soap, data), 0) || soap_put_ns1__unitListGet(soap, data, "ns1:unitListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__unitListGet
#define soap_POST_send_ns1__unitListGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__unitListGet(soap, data), 0) || soap_put_ns1__unitListGet(soap, data, "ns1:unitListGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__unitListGet * SOAP_FMAC4 soap_get_ns1__unitListGet(struct soap*, struct ns1__unitListGet *, const char*, const char*);

#ifndef soap_read_ns1__unitListGet
#define soap_read_ns1__unitListGet(soap, data) ( ((data) ? (soap_default_ns1__unitListGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__unitListGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__unitListGet
#define soap_GET_ns1__unitListGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__unitListGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__unitListGet
#define soap_POST_recv_ns1__unitListGet(soap, data) ( soap_read_ns1__unitListGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__unitListGetResponse_DEFINED
#define SOAP_TYPE_ns1__unitListGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__unitListGetResponse(struct soap*, struct ns1__unitListGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__unitListGetResponse(struct soap*, const struct ns1__unitListGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unitListGetResponse(struct soap*, const char*, int, const struct ns1__unitListGetResponse *, const char*);
SOAP_FMAC3 struct ns1__unitListGetResponse * SOAP_FMAC4 soap_in_ns1__unitListGetResponse(struct soap*, const char*, struct ns1__unitListGetResponse *, const char*);

SOAP_FMAC3 struct ns1__unitListGetResponse * SOAP_FMAC4 soap_new_ns1__unitListGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__unitListGetResponse(struct soap*, const struct ns1__unitListGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__unitListGetResponse
#define soap_write_ns1__unitListGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__unitListGetResponse(soap, data), 0) || soap_put_ns1__unitListGetResponse(soap, data, "ns1:unitListGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__unitListGetResponse
#define soap_PUT_ns1__unitListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__unitListGetResponse(soap, data), 0) || soap_put_ns1__unitListGetResponse(soap, data, "ns1:unitListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__unitListGetResponse
#define soap_PATCH_ns1__unitListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__unitListGetResponse(soap, data), 0) || soap_put_ns1__unitListGetResponse(soap, data, "ns1:unitListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__unitListGetResponse
#define soap_POST_send_ns1__unitListGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__unitListGetResponse(soap, data), 0) || soap_put_ns1__unitListGetResponse(soap, data, "ns1:unitListGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__unitListGetResponse * SOAP_FMAC4 soap_get_ns1__unitListGetResponse(struct soap*, struct ns1__unitListGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__unitListGetResponse
#define soap_read_ns1__unitListGetResponse(soap, data) ( ((data) ? (soap_default_ns1__unitListGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__unitListGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__unitListGetResponse
#define soap_GET_ns1__unitListGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__unitListGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__unitListGetResponse
#define soap_POST_recv_ns1__unitListGetResponse(soap, data) ( soap_read_ns1__unitListGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserCancel_DEFINED
#define SOAP_TYPE_ns1__UserCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserCancel(struct soap*, struct ns1__UserCancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserCancel(struct soap*, const struct ns1__UserCancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserCancel(struct soap*, const char*, int, const struct ns1__UserCancel *, const char*);
SOAP_FMAC3 struct ns1__UserCancel * SOAP_FMAC4 soap_in_ns1__UserCancel(struct soap*, const char*, struct ns1__UserCancel *, const char*);

SOAP_FMAC3 struct ns1__UserCancel * SOAP_FMAC4 soap_new_ns1__UserCancel(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserCancel(struct soap*, const struct ns1__UserCancel *, const char*, const char*);

#ifndef soap_write_ns1__UserCancel
#define soap_write_ns1__UserCancel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserCancel(soap, data), 0) || soap_put_ns1__UserCancel(soap, data, "ns1:UserCancel", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserCancel
#define soap_PUT_ns1__UserCancel(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserCancel(soap, data), 0) || soap_put_ns1__UserCancel(soap, data, "ns1:UserCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserCancel
#define soap_PATCH_ns1__UserCancel(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserCancel(soap, data), 0) || soap_put_ns1__UserCancel(soap, data, "ns1:UserCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserCancel
#define soap_POST_send_ns1__UserCancel(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserCancel(soap, data), 0) || soap_put_ns1__UserCancel(soap, data, "ns1:UserCancel", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserCancel * SOAP_FMAC4 soap_get_ns1__UserCancel(struct soap*, struct ns1__UserCancel *, const char*, const char*);

#ifndef soap_read_ns1__UserCancel
#define soap_read_ns1__UserCancel(soap, data) ( ((data) ? (soap_default_ns1__UserCancel(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserCancel(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserCancel
#define soap_GET_ns1__UserCancel(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserCancel(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserCancel
#define soap_POST_recv_ns1__UserCancel(soap, data) ( soap_read_ns1__UserCancel(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserCancelResponse_DEFINED
#define SOAP_TYPE_ns1__UserCancelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserCancelResponse(struct soap*, struct ns1__UserCancelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserCancelResponse(struct soap*, const struct ns1__UserCancelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserCancelResponse(struct soap*, const char*, int, const struct ns1__UserCancelResponse *, const char*);
SOAP_FMAC3 struct ns1__UserCancelResponse * SOAP_FMAC4 soap_in_ns1__UserCancelResponse(struct soap*, const char*, struct ns1__UserCancelResponse *, const char*);

SOAP_FMAC3 struct ns1__UserCancelResponse * SOAP_FMAC4 soap_new_ns1__UserCancelResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserCancelResponse(struct soap*, const struct ns1__UserCancelResponse *, const char*, const char*);

#ifndef soap_write_ns1__UserCancelResponse
#define soap_write_ns1__UserCancelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserCancelResponse(soap, data), 0) || soap_put_ns1__UserCancelResponse(soap, data, "ns1:UserCancelResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserCancelResponse
#define soap_PUT_ns1__UserCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserCancelResponse(soap, data), 0) || soap_put_ns1__UserCancelResponse(soap, data, "ns1:UserCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserCancelResponse
#define soap_PATCH_ns1__UserCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserCancelResponse(soap, data), 0) || soap_put_ns1__UserCancelResponse(soap, data, "ns1:UserCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserCancelResponse
#define soap_POST_send_ns1__UserCancelResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserCancelResponse(soap, data), 0) || soap_put_ns1__UserCancelResponse(soap, data, "ns1:UserCancelResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserCancelResponse * SOAP_FMAC4 soap_get_ns1__UserCancelResponse(struct soap*, struct ns1__UserCancelResponse *, const char*, const char*);

#ifndef soap_read_ns1__UserCancelResponse
#define soap_read_ns1__UserCancelResponse(soap, data) ( ((data) ? (soap_default_ns1__UserCancelResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserCancelResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserCancelResponse
#define soap_GET_ns1__UserCancelResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserCancelResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserCancelResponse
#define soap_POST_recv_ns1__UserCancelResponse(soap, data) ( soap_read_ns1__UserCancelResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserModify_DEFINED
#define SOAP_TYPE_ns1__UserModify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserModify(struct soap*, struct ns1__UserModify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserModify(struct soap*, const struct ns1__UserModify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserModify(struct soap*, const char*, int, const struct ns1__UserModify *, const char*);
SOAP_FMAC3 struct ns1__UserModify * SOAP_FMAC4 soap_in_ns1__UserModify(struct soap*, const char*, struct ns1__UserModify *, const char*);

SOAP_FMAC3 struct ns1__UserModify * SOAP_FMAC4 soap_new_ns1__UserModify(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserModify(struct soap*, const struct ns1__UserModify *, const char*, const char*);

#ifndef soap_write_ns1__UserModify
#define soap_write_ns1__UserModify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserModify(soap, data), 0) || soap_put_ns1__UserModify(soap, data, "ns1:UserModify", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserModify
#define soap_PUT_ns1__UserModify(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserModify(soap, data), 0) || soap_put_ns1__UserModify(soap, data, "ns1:UserModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserModify
#define soap_PATCH_ns1__UserModify(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserModify(soap, data), 0) || soap_put_ns1__UserModify(soap, data, "ns1:UserModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserModify
#define soap_POST_send_ns1__UserModify(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserModify(soap, data), 0) || soap_put_ns1__UserModify(soap, data, "ns1:UserModify", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserModify * SOAP_FMAC4 soap_get_ns1__UserModify(struct soap*, struct ns1__UserModify *, const char*, const char*);

#ifndef soap_read_ns1__UserModify
#define soap_read_ns1__UserModify(soap, data) ( ((data) ? (soap_default_ns1__UserModify(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserModify(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserModify
#define soap_GET_ns1__UserModify(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserModify(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserModify
#define soap_POST_recv_ns1__UserModify(soap, data) ( soap_read_ns1__UserModify(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserModifyResponse_DEFINED
#define SOAP_TYPE_ns1__UserModifyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserModifyResponse(struct soap*, struct ns1__UserModifyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserModifyResponse(struct soap*, const struct ns1__UserModifyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserModifyResponse(struct soap*, const char*, int, const struct ns1__UserModifyResponse *, const char*);
SOAP_FMAC3 struct ns1__UserModifyResponse * SOAP_FMAC4 soap_in_ns1__UserModifyResponse(struct soap*, const char*, struct ns1__UserModifyResponse *, const char*);

SOAP_FMAC3 struct ns1__UserModifyResponse * SOAP_FMAC4 soap_new_ns1__UserModifyResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserModifyResponse(struct soap*, const struct ns1__UserModifyResponse *, const char*, const char*);

#ifndef soap_write_ns1__UserModifyResponse
#define soap_write_ns1__UserModifyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserModifyResponse(soap, data), 0) || soap_put_ns1__UserModifyResponse(soap, data, "ns1:UserModifyResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserModifyResponse
#define soap_PUT_ns1__UserModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserModifyResponse(soap, data), 0) || soap_put_ns1__UserModifyResponse(soap, data, "ns1:UserModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserModifyResponse
#define soap_PATCH_ns1__UserModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserModifyResponse(soap, data), 0) || soap_put_ns1__UserModifyResponse(soap, data, "ns1:UserModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserModifyResponse
#define soap_POST_send_ns1__UserModifyResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserModifyResponse(soap, data), 0) || soap_put_ns1__UserModifyResponse(soap, data, "ns1:UserModifyResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserModifyResponse * SOAP_FMAC4 soap_get_ns1__UserModifyResponse(struct soap*, struct ns1__UserModifyResponse *, const char*, const char*);

#ifndef soap_read_ns1__UserModifyResponse
#define soap_read_ns1__UserModifyResponse(soap, data) ( ((data) ? (soap_default_ns1__UserModifyResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserModifyResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserModifyResponse
#define soap_GET_ns1__UserModifyResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserModifyResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserModifyResponse
#define soap_POST_recv_ns1__UserModifyResponse(soap, data) ( soap_read_ns1__UserModifyResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserDefine_DEFINED
#define SOAP_TYPE_ns1__UserDefine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserDefine(struct soap*, struct ns1__UserDefine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserDefine(struct soap*, const struct ns1__UserDefine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserDefine(struct soap*, const char*, int, const struct ns1__UserDefine *, const char*);
SOAP_FMAC3 struct ns1__UserDefine * SOAP_FMAC4 soap_in_ns1__UserDefine(struct soap*, const char*, struct ns1__UserDefine *, const char*);

SOAP_FMAC3 struct ns1__UserDefine * SOAP_FMAC4 soap_new_ns1__UserDefine(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserDefine(struct soap*, const struct ns1__UserDefine *, const char*, const char*);

#ifndef soap_write_ns1__UserDefine
#define soap_write_ns1__UserDefine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserDefine(soap, data), 0) || soap_put_ns1__UserDefine(soap, data, "ns1:UserDefine", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserDefine
#define soap_PUT_ns1__UserDefine(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserDefine(soap, data), 0) || soap_put_ns1__UserDefine(soap, data, "ns1:UserDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserDefine
#define soap_PATCH_ns1__UserDefine(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserDefine(soap, data), 0) || soap_put_ns1__UserDefine(soap, data, "ns1:UserDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserDefine
#define soap_POST_send_ns1__UserDefine(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserDefine(soap, data), 0) || soap_put_ns1__UserDefine(soap, data, "ns1:UserDefine", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserDefine * SOAP_FMAC4 soap_get_ns1__UserDefine(struct soap*, struct ns1__UserDefine *, const char*, const char*);

#ifndef soap_read_ns1__UserDefine
#define soap_read_ns1__UserDefine(soap, data) ( ((data) ? (soap_default_ns1__UserDefine(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserDefine(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserDefine
#define soap_GET_ns1__UserDefine(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserDefine(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserDefine
#define soap_POST_recv_ns1__UserDefine(soap, data) ( soap_read_ns1__UserDefine(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserDefineResponse_DEFINED
#define SOAP_TYPE_ns1__UserDefineResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserDefineResponse(struct soap*, struct ns1__UserDefineResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserDefineResponse(struct soap*, const struct ns1__UserDefineResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserDefineResponse(struct soap*, const char*, int, const struct ns1__UserDefineResponse *, const char*);
SOAP_FMAC3 struct ns1__UserDefineResponse * SOAP_FMAC4 soap_in_ns1__UserDefineResponse(struct soap*, const char*, struct ns1__UserDefineResponse *, const char*);

SOAP_FMAC3 struct ns1__UserDefineResponse * SOAP_FMAC4 soap_new_ns1__UserDefineResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserDefineResponse(struct soap*, const struct ns1__UserDefineResponse *, const char*, const char*);

#ifndef soap_write_ns1__UserDefineResponse
#define soap_write_ns1__UserDefineResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserDefineResponse(soap, data), 0) || soap_put_ns1__UserDefineResponse(soap, data, "ns1:UserDefineResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserDefineResponse
#define soap_PUT_ns1__UserDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserDefineResponse(soap, data), 0) || soap_put_ns1__UserDefineResponse(soap, data, "ns1:UserDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserDefineResponse
#define soap_PATCH_ns1__UserDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserDefineResponse(soap, data), 0) || soap_put_ns1__UserDefineResponse(soap, data, "ns1:UserDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserDefineResponse
#define soap_POST_send_ns1__UserDefineResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserDefineResponse(soap, data), 0) || soap_put_ns1__UserDefineResponse(soap, data, "ns1:UserDefineResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserDefineResponse * SOAP_FMAC4 soap_get_ns1__UserDefineResponse(struct soap*, struct ns1__UserDefineResponse *, const char*, const char*);

#ifndef soap_read_ns1__UserDefineResponse
#define soap_read_ns1__UserDefineResponse(soap, data) ( ((data) ? (soap_default_ns1__UserDefineResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserDefineResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserDefineResponse
#define soap_GET_ns1__UserDefineResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserDefineResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserDefineResponse
#define soap_POST_recv_ns1__UserDefineResponse(soap, data) ( soap_read_ns1__UserDefineResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getLocalHostIp_DEFINED
#define SOAP_TYPE_ns1__getLocalHostIp_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLocalHostIp(struct soap*, struct ns1__getLocalHostIp *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLocalHostIp(struct soap*, const struct ns1__getLocalHostIp *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLocalHostIp(struct soap*, const char*, int, const struct ns1__getLocalHostIp *, const char*);
SOAP_FMAC3 struct ns1__getLocalHostIp * SOAP_FMAC4 soap_in_ns1__getLocalHostIp(struct soap*, const char*, struct ns1__getLocalHostIp *, const char*);

SOAP_FMAC3 struct ns1__getLocalHostIp * SOAP_FMAC4 soap_new_ns1__getLocalHostIp(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLocalHostIp(struct soap*, const struct ns1__getLocalHostIp *, const char*, const char*);

#ifndef soap_write_ns1__getLocalHostIp
#define soap_write_ns1__getLocalHostIp(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getLocalHostIp(soap, data), 0) || soap_put_ns1__getLocalHostIp(soap, data, "ns1:getLocalHostIp", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getLocalHostIp
#define soap_PUT_ns1__getLocalHostIp(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getLocalHostIp(soap, data), 0) || soap_put_ns1__getLocalHostIp(soap, data, "ns1:getLocalHostIp", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__getLocalHostIp
#define soap_PATCH_ns1__getLocalHostIp(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getLocalHostIp(soap, data), 0) || soap_put_ns1__getLocalHostIp(soap, data, "ns1:getLocalHostIp", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__getLocalHostIp
#define soap_POST_send_ns1__getLocalHostIp(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getLocalHostIp(soap, data), 0) || soap_put_ns1__getLocalHostIp(soap, data, "ns1:getLocalHostIp", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getLocalHostIp * SOAP_FMAC4 soap_get_ns1__getLocalHostIp(struct soap*, struct ns1__getLocalHostIp *, const char*, const char*);

#ifndef soap_read_ns1__getLocalHostIp
#define soap_read_ns1__getLocalHostIp(soap, data) ( ((data) ? (soap_default_ns1__getLocalHostIp(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getLocalHostIp(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getLocalHostIp
#define soap_GET_ns1__getLocalHostIp(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getLocalHostIp(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__getLocalHostIp
#define soap_POST_recv_ns1__getLocalHostIp(soap, data) ( soap_read_ns1__getLocalHostIp(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getLocalHostIpResponse_DEFINED
#define SOAP_TYPE_ns1__getLocalHostIpResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getLocalHostIpResponse(struct soap*, struct ns1__getLocalHostIpResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getLocalHostIpResponse(struct soap*, const struct ns1__getLocalHostIpResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getLocalHostIpResponse(struct soap*, const char*, int, const struct ns1__getLocalHostIpResponse *, const char*);
SOAP_FMAC3 struct ns1__getLocalHostIpResponse * SOAP_FMAC4 soap_in_ns1__getLocalHostIpResponse(struct soap*, const char*, struct ns1__getLocalHostIpResponse *, const char*);

SOAP_FMAC3 struct ns1__getLocalHostIpResponse * SOAP_FMAC4 soap_new_ns1__getLocalHostIpResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getLocalHostIpResponse(struct soap*, const struct ns1__getLocalHostIpResponse *, const char*, const char*);

#ifndef soap_write_ns1__getLocalHostIpResponse
#define soap_write_ns1__getLocalHostIpResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getLocalHostIpResponse(soap, data), 0) || soap_put_ns1__getLocalHostIpResponse(soap, data, "ns1:getLocalHostIpResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getLocalHostIpResponse
#define soap_PUT_ns1__getLocalHostIpResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getLocalHostIpResponse(soap, data), 0) || soap_put_ns1__getLocalHostIpResponse(soap, data, "ns1:getLocalHostIpResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__getLocalHostIpResponse
#define soap_PATCH_ns1__getLocalHostIpResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getLocalHostIpResponse(soap, data), 0) || soap_put_ns1__getLocalHostIpResponse(soap, data, "ns1:getLocalHostIpResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__getLocalHostIpResponse
#define soap_POST_send_ns1__getLocalHostIpResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getLocalHostIpResponse(soap, data), 0) || soap_put_ns1__getLocalHostIpResponse(soap, data, "ns1:getLocalHostIpResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getLocalHostIpResponse * SOAP_FMAC4 soap_get_ns1__getLocalHostIpResponse(struct soap*, struct ns1__getLocalHostIpResponse *, const char*, const char*);

#ifndef soap_read_ns1__getLocalHostIpResponse
#define soap_read_ns1__getLocalHostIpResponse(soap, data) ( ((data) ? (soap_default_ns1__getLocalHostIpResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getLocalHostIpResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getLocalHostIpResponse
#define soap_GET_ns1__getLocalHostIpResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getLocalHostIpResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__getLocalHostIpResponse
#define soap_POST_recv_ns1__getLocalHostIpResponse(soap, data) ( soap_read_ns1__getLocalHostIpResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserListGet_DEFINED
#define SOAP_TYPE_ns1__UserListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserListGet(struct soap*, struct ns1__UserListGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserListGet(struct soap*, const struct ns1__UserListGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserListGet(struct soap*, const char*, int, const struct ns1__UserListGet *, const char*);
SOAP_FMAC3 struct ns1__UserListGet * SOAP_FMAC4 soap_in_ns1__UserListGet(struct soap*, const char*, struct ns1__UserListGet *, const char*);

SOAP_FMAC3 struct ns1__UserListGet * SOAP_FMAC4 soap_new_ns1__UserListGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserListGet(struct soap*, const struct ns1__UserListGet *, const char*, const char*);

#ifndef soap_write_ns1__UserListGet
#define soap_write_ns1__UserListGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserListGet(soap, data), 0) || soap_put_ns1__UserListGet(soap, data, "ns1:UserListGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserListGet
#define soap_PUT_ns1__UserListGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserListGet(soap, data), 0) || soap_put_ns1__UserListGet(soap, data, "ns1:UserListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserListGet
#define soap_PATCH_ns1__UserListGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserListGet(soap, data), 0) || soap_put_ns1__UserListGet(soap, data, "ns1:UserListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserListGet
#define soap_POST_send_ns1__UserListGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserListGet(soap, data), 0) || soap_put_ns1__UserListGet(soap, data, "ns1:UserListGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserListGet * SOAP_FMAC4 soap_get_ns1__UserListGet(struct soap*, struct ns1__UserListGet *, const char*, const char*);

#ifndef soap_read_ns1__UserListGet
#define soap_read_ns1__UserListGet(soap, data) ( ((data) ? (soap_default_ns1__UserListGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserListGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserListGet
#define soap_GET_ns1__UserListGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserListGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserListGet
#define soap_POST_recv_ns1__UserListGet(soap, data) ( soap_read_ns1__UserListGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__UserListGetResponse_DEFINED
#define SOAP_TYPE_ns1__UserListGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__UserListGetResponse(struct soap*, struct ns1__UserListGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__UserListGetResponse(struct soap*, const struct ns1__UserListGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UserListGetResponse(struct soap*, const char*, int, const struct ns1__UserListGetResponse *, const char*);
SOAP_FMAC3 struct ns1__UserListGetResponse * SOAP_FMAC4 soap_in_ns1__UserListGetResponse(struct soap*, const char*, struct ns1__UserListGetResponse *, const char*);

SOAP_FMAC3 struct ns1__UserListGetResponse * SOAP_FMAC4 soap_new_ns1__UserListGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__UserListGetResponse(struct soap*, const struct ns1__UserListGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__UserListGetResponse
#define soap_write_ns1__UserListGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__UserListGetResponse(soap, data), 0) || soap_put_ns1__UserListGetResponse(soap, data, "ns1:UserListGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__UserListGetResponse
#define soap_PUT_ns1__UserListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserListGetResponse(soap, data), 0) || soap_put_ns1__UserListGetResponse(soap, data, "ns1:UserListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__UserListGetResponse
#define soap_PATCH_ns1__UserListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserListGetResponse(soap, data), 0) || soap_put_ns1__UserListGetResponse(soap, data, "ns1:UserListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__UserListGetResponse
#define soap_POST_send_ns1__UserListGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__UserListGetResponse(soap, data), 0) || soap_put_ns1__UserListGetResponse(soap, data, "ns1:UserListGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__UserListGetResponse * SOAP_FMAC4 soap_get_ns1__UserListGetResponse(struct soap*, struct ns1__UserListGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__UserListGetResponse
#define soap_read_ns1__UserListGetResponse(soap, data) ( ((data) ? (soap_default_ns1__UserListGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__UserListGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__UserListGetResponse
#define soap_GET_ns1__UserListGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__UserListGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__UserListGetResponse
#define soap_POST_recv_ns1__UserListGetResponse(soap, data) ( soap_read_ns1__UserListGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__Challenge_DEFINED
#define SOAP_TYPE_ns1__Challenge_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__Challenge(struct soap*, struct ns1__Challenge *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Challenge(struct soap*, const struct ns1__Challenge *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Challenge(struct soap*, const char*, int, const struct ns1__Challenge *, const char*);
SOAP_FMAC3 struct ns1__Challenge * SOAP_FMAC4 soap_in_ns1__Challenge(struct soap*, const char*, struct ns1__Challenge *, const char*);

SOAP_FMAC3 struct ns1__Challenge * SOAP_FMAC4 soap_new_ns1__Challenge(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Challenge(struct soap*, const struct ns1__Challenge *, const char*, const char*);

#ifndef soap_write_ns1__Challenge
#define soap_write_ns1__Challenge(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__Challenge
#define soap_PUT_ns1__Challenge(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__Challenge
#define soap_PATCH_ns1__Challenge(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__Challenge
#define soap_POST_send_ns1__Challenge(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__Challenge * SOAP_FMAC4 soap_get_ns1__Challenge(struct soap*, struct ns1__Challenge *, const char*, const char*);

#ifndef soap_read_ns1__Challenge
#define soap_read_ns1__Challenge(soap, data) ( ((data) ? (soap_default_ns1__Challenge(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__Challenge(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__Challenge
#define soap_GET_ns1__Challenge(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__Challenge(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__Challenge
#define soap_POST_recv_ns1__Challenge(soap, data) ( soap_read_ns1__Challenge(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__ChallengeResponse_DEFINED
#define SOAP_TYPE_ns1__ChallengeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ChallengeResponse(struct soap*, struct ns1__ChallengeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ChallengeResponse(struct soap*, const struct ns1__ChallengeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChallengeResponse(struct soap*, const char*, int, const struct ns1__ChallengeResponse *, const char*);
SOAP_FMAC3 struct ns1__ChallengeResponse * SOAP_FMAC4 soap_in_ns1__ChallengeResponse(struct soap*, const char*, struct ns1__ChallengeResponse *, const char*);

SOAP_FMAC3 struct ns1__ChallengeResponse * SOAP_FMAC4 soap_new_ns1__ChallengeResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ChallengeResponse(struct soap*, const struct ns1__ChallengeResponse *, const char*, const char*);

#ifndef soap_write_ns1__ChallengeResponse
#define soap_write_ns1__ChallengeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__ChallengeResponse
#define soap_PUT_ns1__ChallengeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__ChallengeResponse
#define soap_PATCH_ns1__ChallengeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__ChallengeResponse
#define soap_POST_send_ns1__ChallengeResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__ChallengeResponse * SOAP_FMAC4 soap_get_ns1__ChallengeResponse(struct soap*, struct ns1__ChallengeResponse *, const char*, const char*);

#ifndef soap_read_ns1__ChallengeResponse
#define soap_read_ns1__ChallengeResponse(soap, data) ( ((data) ? (soap_default_ns1__ChallengeResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__ChallengeResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__ChallengeResponse
#define soap_GET_ns1__ChallengeResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__ChallengeResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__ChallengeResponse
#define soap_POST_recv_ns1__ChallengeResponse(soap, data) ( soap_read_ns1__ChallengeResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Detail
#define soap_PATCH_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE__ns1__TException_DEFINED
#define SOAP_TYPE__ns1__TException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__ns1__TException(struct soap*, struct _ns1__TException *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__TException(struct soap*, const struct _ns1__TException *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TException(struct soap*, const char*, int, const struct _ns1__TException *, const char*);
SOAP_FMAC3 struct _ns1__TException * SOAP_FMAC4 soap_in__ns1__TException(struct soap*, const char*, struct _ns1__TException *, const char*);

SOAP_FMAC3 struct _ns1__TException * SOAP_FMAC4 soap_new__ns1__TException(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__ns1__TException(struct soap*, const struct _ns1__TException *, const char*, const char*);

#ifndef soap_write__ns1__TException
#define soap_write__ns1__TException(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__ns1__TException(soap, data), 0) || soap_put__ns1__TException(soap, data, "ns1:TException", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__ns1__TException
#define soap_PUT__ns1__TException(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__ns1__TException(soap, data), 0) || soap_put__ns1__TException(soap, data, "ns1:TException", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__ns1__TException
#define soap_PATCH__ns1__TException(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__ns1__TException(soap, data), 0) || soap_put__ns1__TException(soap, data, "ns1:TException", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__ns1__TException
#define soap_POST_send__ns1__TException(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__ns1__TException(soap, data), 0) || soap_put__ns1__TException(soap, data, "ns1:TException", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _ns1__TException * SOAP_FMAC4 soap_get__ns1__TException(struct soap*, struct _ns1__TException *, const char*, const char*);

#ifndef soap_read__ns1__TException
#define soap_read__ns1__TException(soap, data) ( ((data) ? (soap_default__ns1__TException(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__ns1__TException(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__ns1__TException
#define soap_GET__ns1__TException(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__ns1__TException(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__ns1__TException
#define soap_POST_recv__ns1__TException(soap, data) ( soap_read__ns1__TException(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ArrayOf_USCORExsd_USCOREanyType_DEFINED
#define SOAP_TYPE_ArrayOf_USCORExsd_USCOREanyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ArrayOf_USCORExsd_USCOREanyType(struct soap*, struct ArrayOf_USCORExsd_USCOREanyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ArrayOf_USCORExsd_USCOREanyType(struct soap*, const struct ArrayOf_USCORExsd_USCOREanyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOf_USCORExsd_USCOREanyType(struct soap*, const char*, int, const struct ArrayOf_USCORExsd_USCOREanyType *, const char*);
SOAP_FMAC3 struct ArrayOf_USCORExsd_USCOREanyType * SOAP_FMAC4 soap_in_ArrayOf_USCORExsd_USCOREanyType(struct soap*, const char*, struct ArrayOf_USCORExsd_USCOREanyType *, const char*);

SOAP_FMAC3 struct ArrayOf_USCORExsd_USCOREanyType * SOAP_FMAC4 soap_new_ArrayOf_USCORExsd_USCOREanyType(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ArrayOf_USCORExsd_USCOREanyType(struct soap*, const struct ArrayOf_USCORExsd_USCOREanyType *, const char*, const char*);

#ifndef soap_write_ArrayOf_USCORExsd_USCOREanyType
#define soap_write_ArrayOf_USCORExsd_USCOREanyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ArrayOf_USCORExsd_USCOREanyType(soap, data), 0) || soap_put_ArrayOf_USCORExsd_USCOREanyType(soap, data, "ArrayOf_xsd_anyType", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ArrayOf_USCORExsd_USCOREanyType
#define soap_PUT_ArrayOf_USCORExsd_USCOREanyType(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ArrayOf_USCORExsd_USCOREanyType(soap, data), 0) || soap_put_ArrayOf_USCORExsd_USCOREanyType(soap, data, "ArrayOf_xsd_anyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ArrayOf_USCORExsd_USCOREanyType
#define soap_PATCH_ArrayOf_USCORExsd_USCOREanyType(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ArrayOf_USCORExsd_USCOREanyType(soap, data), 0) || soap_put_ArrayOf_USCORExsd_USCOREanyType(soap, data, "ArrayOf_xsd_anyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ArrayOf_USCORExsd_USCOREanyType
#define soap_POST_send_ArrayOf_USCORExsd_USCOREanyType(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ArrayOf_USCORExsd_USCOREanyType(soap, data), 0) || soap_put_ArrayOf_USCORExsd_USCOREanyType(soap, data, "ArrayOf_xsd_anyType", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ArrayOf_USCORExsd_USCOREanyType * SOAP_FMAC4 soap_get_ArrayOf_USCORExsd_USCOREanyType(struct soap*, struct ArrayOf_USCORExsd_USCOREanyType *, const char*, const char*);

#ifndef soap_read_ArrayOf_USCORExsd_USCOREanyType
#define soap_read_ArrayOf_USCORExsd_USCOREanyType(soap, data) ( ((data) ? (soap_default_ArrayOf_USCORExsd_USCOREanyType(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ArrayOf_USCORExsd_USCOREanyType(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ArrayOf_USCORExsd_USCOREanyType
#define soap_GET_ArrayOf_USCORExsd_USCOREanyType(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ArrayOf_USCORExsd_USCOREanyType(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ArrayOf_USCORExsd_USCOREanyType
#define soap_POST_recv_ArrayOf_USCORExsd_USCOREanyType(soap, data) ( soap_read_ArrayOf_USCORExsd_USCOREanyType(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns3__Vector_DEFINED
#define SOAP_TYPE_ns3__Vector_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__Vector(struct soap*, struct ns3__Vector *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__Vector(struct soap*, const struct ns3__Vector *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Vector(struct soap*, const char*, int, const struct ns3__Vector *, const char*);
SOAP_FMAC3 struct ns3__Vector * SOAP_FMAC4 soap_in_ns3__Vector(struct soap*, const char*, struct ns3__Vector *, const char*);

SOAP_FMAC3 struct ns3__Vector * SOAP_FMAC4 soap_new_ns3__Vector(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__Vector(struct soap*, const struct ns3__Vector *, const char*, const char*);

#ifndef soap_write_ns3__Vector
#define soap_write_ns3__Vector(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns3__Vector(soap, data), 0) || soap_put_ns3__Vector(soap, data, "ns3:Vector", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns3__Vector
#define soap_PUT_ns3__Vector(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns3__Vector(soap, data), 0) || soap_put_ns3__Vector(soap, data, "ns3:Vector", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns3__Vector
#define soap_PATCH_ns3__Vector(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns3__Vector(soap, data), 0) || soap_put_ns3__Vector(soap, data, "ns3:Vector", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns3__Vector
#define soap_POST_send_ns3__Vector(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns3__Vector(soap, data), 0) || soap_put_ns3__Vector(soap, data, "ns3:Vector", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns3__Vector * SOAP_FMAC4 soap_get_ns3__Vector(struct soap*, struct ns3__Vector *, const char*, const char*);

#ifndef soap_read_ns3__Vector
#define soap_read_ns3__Vector(soap, data) ( ((data) ? (soap_default_ns3__Vector(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns3__Vector(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns3__Vector
#define soap_GET_ns3__Vector(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns3__Vector(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns3__Vector
#define soap_POST_recv_ns3__Vector(soap, data) ( soap_read_ns3__Vector(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__TException_DEFINED
#define SOAP_TYPE_ns2__TException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__TException(struct soap*, struct ns2__TException *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__TException(struct soap*, const struct ns2__TException *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TException(struct soap*, const char*, int, const struct ns2__TException *, const char*);
SOAP_FMAC3 struct ns2__TException * SOAP_FMAC4 soap_in_ns2__TException(struct soap*, const char*, struct ns2__TException *, const char*);

SOAP_FMAC3 struct ns2__TException * SOAP_FMAC4 soap_new_ns2__TException(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__TException(struct soap*, const struct ns2__TException *, const char*, const char*);

#ifndef soap_write_ns2__TException
#define soap_write_ns2__TException(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__TException(soap, data), 0) || soap_put_ns2__TException(soap, data, "ns2:TException", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__TException
#define soap_PUT_ns2__TException(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__TException(soap, data), 0) || soap_put_ns2__TException(soap, data, "ns2:TException", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns2__TException
#define soap_PATCH_ns2__TException(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__TException(soap, data), 0) || soap_put_ns2__TException(soap, data, "ns2:TException", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns2__TException
#define soap_POST_send_ns2__TException(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__TException(soap, data), 0) || soap_put_ns2__TException(soap, data, "ns2:TException", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__TException * SOAP_FMAC4 soap_get_ns2__TException(struct soap*, struct ns2__TException *, const char*, const char*);

#ifndef soap_read_ns2__TException
#define soap_read_ns2__TException(soap, data) ( ((data) ? (soap_default_ns2__TException(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__TException(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__TException
#define soap_GET_ns2__TException(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__TException(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns2__TException
#define soap_POST_recv_ns2__TException(soap, data) ( soap_read_ns2__TException(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__synAuthListResponse_DEFINED
#define SOAP_TYPE_PointerTons1__synAuthListResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__synAuthListResponse(struct soap*, struct ns1__synAuthListResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__synAuthListResponse(struct soap*, const char *, int, struct ns1__synAuthListResponse *const*, const char *);
SOAP_FMAC3 struct ns1__synAuthListResponse ** SOAP_FMAC4 soap_in_PointerTons1__synAuthListResponse(struct soap*, const char*, struct ns1__synAuthListResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__synAuthListResponse(struct soap*, struct ns1__synAuthListResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__synAuthListResponse ** SOAP_FMAC4 soap_get_PointerTons1__synAuthListResponse(struct soap*, struct ns1__synAuthListResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToArrayOf_USCORExsd_USCOREanyType_DEFINED
#define SOAP_TYPE_PointerToArrayOf_USCORExsd_USCOREanyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToArrayOf_USCORExsd_USCOREanyType(struct soap*, struct ArrayOf_USCORExsd_USCOREanyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToArrayOf_USCORExsd_USCOREanyType(struct soap*, const char *, int, struct ArrayOf_USCORExsd_USCOREanyType *const*, const char *);
SOAP_FMAC3 struct ArrayOf_USCORExsd_USCOREanyType ** SOAP_FMAC4 soap_in_PointerToArrayOf_USCORExsd_USCOREanyType(struct soap*, const char*, struct ArrayOf_USCORExsd_USCOREanyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToArrayOf_USCORExsd_USCOREanyType(struct soap*, struct ArrayOf_USCORExsd_USCOREanyType *const*, const char*, const char*);
SOAP_FMAC3 struct ArrayOf_USCORExsd_USCOREanyType ** SOAP_FMAC4 soap_get_PointerToArrayOf_USCORExsd_USCOREanyType(struct soap*, struct ArrayOf_USCORExsd_USCOREanyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToSOAP_ENC__string_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENC__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENC__string(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENC__string(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToSOAP_ENC__string(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENC__string(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToSOAP_ENC__string(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__TException_DEFINED
#define SOAP_TYPE_PointerTo_ns1__TException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__TException(struct soap*, struct _ns1__TException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__TException(struct soap*, const char *, int, struct _ns1__TException *const*, const char *);
SOAP_FMAC3 struct _ns1__TException ** SOAP_FMAC4 soap_in_PointerTo_ns1__TException(struct soap*, const char*, struct _ns1__TException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__TException(struct soap*, struct _ns1__TException *const*, const char*, const char*);
SOAP_FMAC3 struct _ns1__TException ** SOAP_FMAC4 soap_get_PointerTo_ns1__TException(struct soap*, struct _ns1__TException **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__TException_DEFINED
#define SOAP_TYPE_PointerTons2__TException_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TException(struct soap*, struct ns2__TException *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TException(struct soap*, const char *, int, struct ns2__TException *const*, const char *);
SOAP_FMAC3 struct ns2__TException ** SOAP_FMAC4 soap_in_PointerTons2__TException(struct soap*, const char*, struct ns2__TException **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TException(struct soap*, struct ns2__TException *const*, const char*, const char*);
SOAP_FMAC3 struct ns2__TException ** SOAP_FMAC4 soap_get_PointerTons2__TException(struct soap*, struct ns2__TException **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_SOAP_ENC__string_DEFINED
#define SOAP_TYPE_SOAP_ENC__string_DEFINED

#ifdef SOAP_DEFAULT_SOAP_ENC__string
#define soap_default_SOAP_ENC__string(soap, a) (*(a) = SOAP_DEFAULT_SOAP_ENC__string)
#else
#define soap_default_SOAP_ENC__string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENC__string(struct soap*, char *const*);

#define soap_SOAP_ENC__string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2SOAP_ENC__string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_SOAP_ENC__string(struct soap*, const char*, char **, const char*);
#define soap_new_SOAP_ENC__string soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENC__string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_SOAP_ENC__string
#define soap_write_SOAP_ENC__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_SOAP_ENC__string(soap, data, "SOAP-ENC:string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENC__string
#define soap_PUT_SOAP_ENC__string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_SOAP_ENC__string(soap, data, "SOAP-ENC:string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENC__string
#define soap_PATCH_SOAP_ENC__string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_SOAP_ENC__string(soap, data, "SOAP-ENC:string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENC__string
#define soap_POST_send_SOAP_ENC__string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_SOAP_ENC__string(soap, data, "SOAP-ENC:string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_SOAP_ENC__string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_SOAP_ENC__string
#define soap_read_SOAP_ENC__string(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENC__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENC__string
#define soap_GET_SOAP_ENC__string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENC__string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENC__string
#define soap_POST_recv_SOAP_ENC__string(soap, data) ( soap_read_SOAP_ENC__string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__QName
#define soap_PATCH__QName(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_string
#define soap_PATCH_string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifdef __cplusplus
}
#endif

#endif

/* End of soapH.h */
