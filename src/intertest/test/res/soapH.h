/* soapH.h
   Generated by gSOAP 2.8.71 for res.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byte
#define soap_PATCH_byte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_int
#define soap_PATCH_int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Fault
#define soap_PATCH_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Reason
#define soap_PATCH_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Detail
#define soap_PATCH_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Code
#define soap_PATCH_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Header
#define soap_PATCH_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE_ns1__DataModify_DEFINED
#define SOAP_TYPE_ns1__DataModify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataModify(struct soap*, struct ns1__DataModify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataModify(struct soap*, const struct ns1__DataModify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataModify(struct soap*, const char*, int, const struct ns1__DataModify *, const char*);
SOAP_FMAC3 struct ns1__DataModify * SOAP_FMAC4 soap_in_ns1__DataModify(struct soap*, const char*, struct ns1__DataModify *, const char*);

SOAP_FMAC3 struct ns1__DataModify * SOAP_FMAC4 soap_new_ns1__DataModify(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataModify(struct soap*, const struct ns1__DataModify *, const char*, const char*);

#ifndef soap_write_ns1__DataModify
#define soap_write_ns1__DataModify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataModify(soap, data), 0) || soap_put_ns1__DataModify(soap, data, "ns1:DataModify", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataModify
#define soap_PUT_ns1__DataModify(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataModify(soap, data), 0) || soap_put_ns1__DataModify(soap, data, "ns1:DataModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataModify
#define soap_PATCH_ns1__DataModify(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataModify(soap, data), 0) || soap_put_ns1__DataModify(soap, data, "ns1:DataModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataModify
#define soap_POST_send_ns1__DataModify(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataModify(soap, data), 0) || soap_put_ns1__DataModify(soap, data, "ns1:DataModify", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataModify * SOAP_FMAC4 soap_get_ns1__DataModify(struct soap*, struct ns1__DataModify *, const char*, const char*);

#ifndef soap_read_ns1__DataModify
#define soap_read_ns1__DataModify(soap, data) ( ((data) ? (soap_default_ns1__DataModify(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataModify(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataModify
#define soap_GET_ns1__DataModify(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataModify(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataModify
#define soap_POST_recv_ns1__DataModify(soap, data) ( soap_read_ns1__DataModify(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DataModifyResponse_DEFINED
#define SOAP_TYPE_ns1__DataModifyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataModifyResponse(struct soap*, struct ns1__DataModifyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataModifyResponse(struct soap*, const struct ns1__DataModifyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataModifyResponse(struct soap*, const char*, int, const struct ns1__DataModifyResponse *, const char*);
SOAP_FMAC3 struct ns1__DataModifyResponse * SOAP_FMAC4 soap_in_ns1__DataModifyResponse(struct soap*, const char*, struct ns1__DataModifyResponse *, const char*);

SOAP_FMAC3 struct ns1__DataModifyResponse * SOAP_FMAC4 soap_new_ns1__DataModifyResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataModifyResponse(struct soap*, const struct ns1__DataModifyResponse *, const char*, const char*);

#ifndef soap_write_ns1__DataModifyResponse
#define soap_write_ns1__DataModifyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataModifyResponse(soap, data), 0) || soap_put_ns1__DataModifyResponse(soap, data, "ns1:DataModifyResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataModifyResponse
#define soap_PUT_ns1__DataModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataModifyResponse(soap, data), 0) || soap_put_ns1__DataModifyResponse(soap, data, "ns1:DataModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataModifyResponse
#define soap_PATCH_ns1__DataModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataModifyResponse(soap, data), 0) || soap_put_ns1__DataModifyResponse(soap, data, "ns1:DataModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataModifyResponse
#define soap_POST_send_ns1__DataModifyResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataModifyResponse(soap, data), 0) || soap_put_ns1__DataModifyResponse(soap, data, "ns1:DataModifyResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataModifyResponse * SOAP_FMAC4 soap_get_ns1__DataModifyResponse(struct soap*, struct ns1__DataModifyResponse *, const char*, const char*);

#ifndef soap_read_ns1__DataModifyResponse
#define soap_read_ns1__DataModifyResponse(soap, data) ( ((data) ? (soap_default_ns1__DataModifyResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataModifyResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataModifyResponse
#define soap_GET_ns1__DataModifyResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataModifyResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataModifyResponse
#define soap_POST_recv_ns1__DataModifyResponse(soap, data) ( soap_read_ns1__DataModifyResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DataCancel_DEFINED
#define SOAP_TYPE_ns1__DataCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataCancel(struct soap*, struct ns1__DataCancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataCancel(struct soap*, const struct ns1__DataCancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataCancel(struct soap*, const char*, int, const struct ns1__DataCancel *, const char*);
SOAP_FMAC3 struct ns1__DataCancel * SOAP_FMAC4 soap_in_ns1__DataCancel(struct soap*, const char*, struct ns1__DataCancel *, const char*);

SOAP_FMAC3 struct ns1__DataCancel * SOAP_FMAC4 soap_new_ns1__DataCancel(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataCancel(struct soap*, const struct ns1__DataCancel *, const char*, const char*);

#ifndef soap_write_ns1__DataCancel
#define soap_write_ns1__DataCancel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataCancel(soap, data), 0) || soap_put_ns1__DataCancel(soap, data, "ns1:DataCancel", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataCancel
#define soap_PUT_ns1__DataCancel(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataCancel(soap, data), 0) || soap_put_ns1__DataCancel(soap, data, "ns1:DataCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataCancel
#define soap_PATCH_ns1__DataCancel(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataCancel(soap, data), 0) || soap_put_ns1__DataCancel(soap, data, "ns1:DataCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataCancel
#define soap_POST_send_ns1__DataCancel(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataCancel(soap, data), 0) || soap_put_ns1__DataCancel(soap, data, "ns1:DataCancel", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataCancel * SOAP_FMAC4 soap_get_ns1__DataCancel(struct soap*, struct ns1__DataCancel *, const char*, const char*);

#ifndef soap_read_ns1__DataCancel
#define soap_read_ns1__DataCancel(soap, data) ( ((data) ? (soap_default_ns1__DataCancel(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataCancel(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataCancel
#define soap_GET_ns1__DataCancel(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataCancel(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataCancel
#define soap_POST_recv_ns1__DataCancel(soap, data) ( soap_read_ns1__DataCancel(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DataCancelResponse_DEFINED
#define SOAP_TYPE_ns1__DataCancelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataCancelResponse(struct soap*, struct ns1__DataCancelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataCancelResponse(struct soap*, const struct ns1__DataCancelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataCancelResponse(struct soap*, const char*, int, const struct ns1__DataCancelResponse *, const char*);
SOAP_FMAC3 struct ns1__DataCancelResponse * SOAP_FMAC4 soap_in_ns1__DataCancelResponse(struct soap*, const char*, struct ns1__DataCancelResponse *, const char*);

SOAP_FMAC3 struct ns1__DataCancelResponse * SOAP_FMAC4 soap_new_ns1__DataCancelResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataCancelResponse(struct soap*, const struct ns1__DataCancelResponse *, const char*, const char*);

#ifndef soap_write_ns1__DataCancelResponse
#define soap_write_ns1__DataCancelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataCancelResponse(soap, data), 0) || soap_put_ns1__DataCancelResponse(soap, data, "ns1:DataCancelResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataCancelResponse
#define soap_PUT_ns1__DataCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataCancelResponse(soap, data), 0) || soap_put_ns1__DataCancelResponse(soap, data, "ns1:DataCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataCancelResponse
#define soap_PATCH_ns1__DataCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataCancelResponse(soap, data), 0) || soap_put_ns1__DataCancelResponse(soap, data, "ns1:DataCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataCancelResponse
#define soap_POST_send_ns1__DataCancelResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataCancelResponse(soap, data), 0) || soap_put_ns1__DataCancelResponse(soap, data, "ns1:DataCancelResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataCancelResponse * SOAP_FMAC4 soap_get_ns1__DataCancelResponse(struct soap*, struct ns1__DataCancelResponse *, const char*, const char*);

#ifndef soap_read_ns1__DataCancelResponse
#define soap_read_ns1__DataCancelResponse(soap, data) ( ((data) ? (soap_default_ns1__DataCancelResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataCancelResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataCancelResponse
#define soap_GET_ns1__DataCancelResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataCancelResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataCancelResponse
#define soap_POST_recv_ns1__DataCancelResponse(soap, data) ( soap_read_ns1__DataCancelResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftModify_DEFINED
#define SOAP_TYPE_ns1__SoftModify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftModify(struct soap*, struct ns1__SoftModify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftModify(struct soap*, const struct ns1__SoftModify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftModify(struct soap*, const char*, int, const struct ns1__SoftModify *, const char*);
SOAP_FMAC3 struct ns1__SoftModify * SOAP_FMAC4 soap_in_ns1__SoftModify(struct soap*, const char*, struct ns1__SoftModify *, const char*);

SOAP_FMAC3 struct ns1__SoftModify * SOAP_FMAC4 soap_new_ns1__SoftModify(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftModify(struct soap*, const struct ns1__SoftModify *, const char*, const char*);

#ifndef soap_write_ns1__SoftModify
#define soap_write_ns1__SoftModify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftModify(soap, data), 0) || soap_put_ns1__SoftModify(soap, data, "ns1:SoftModify", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftModify
#define soap_PUT_ns1__SoftModify(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftModify(soap, data), 0) || soap_put_ns1__SoftModify(soap, data, "ns1:SoftModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftModify
#define soap_PATCH_ns1__SoftModify(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftModify(soap, data), 0) || soap_put_ns1__SoftModify(soap, data, "ns1:SoftModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftModify
#define soap_POST_send_ns1__SoftModify(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftModify(soap, data), 0) || soap_put_ns1__SoftModify(soap, data, "ns1:SoftModify", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftModify * SOAP_FMAC4 soap_get_ns1__SoftModify(struct soap*, struct ns1__SoftModify *, const char*, const char*);

#ifndef soap_read_ns1__SoftModify
#define soap_read_ns1__SoftModify(soap, data) ( ((data) ? (soap_default_ns1__SoftModify(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftModify(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftModify
#define soap_GET_ns1__SoftModify(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftModify(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftModify
#define soap_POST_recv_ns1__SoftModify(soap, data) ( soap_read_ns1__SoftModify(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftModifyResponse_DEFINED
#define SOAP_TYPE_ns1__SoftModifyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftModifyResponse(struct soap*, struct ns1__SoftModifyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftModifyResponse(struct soap*, const struct ns1__SoftModifyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftModifyResponse(struct soap*, const char*, int, const struct ns1__SoftModifyResponse *, const char*);
SOAP_FMAC3 struct ns1__SoftModifyResponse * SOAP_FMAC4 soap_in_ns1__SoftModifyResponse(struct soap*, const char*, struct ns1__SoftModifyResponse *, const char*);

SOAP_FMAC3 struct ns1__SoftModifyResponse * SOAP_FMAC4 soap_new_ns1__SoftModifyResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftModifyResponse(struct soap*, const struct ns1__SoftModifyResponse *, const char*, const char*);

#ifndef soap_write_ns1__SoftModifyResponse
#define soap_write_ns1__SoftModifyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftModifyResponse(soap, data), 0) || soap_put_ns1__SoftModifyResponse(soap, data, "ns1:SoftModifyResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftModifyResponse
#define soap_PUT_ns1__SoftModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftModifyResponse(soap, data), 0) || soap_put_ns1__SoftModifyResponse(soap, data, "ns1:SoftModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftModifyResponse
#define soap_PATCH_ns1__SoftModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftModifyResponse(soap, data), 0) || soap_put_ns1__SoftModifyResponse(soap, data, "ns1:SoftModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftModifyResponse
#define soap_POST_send_ns1__SoftModifyResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftModifyResponse(soap, data), 0) || soap_put_ns1__SoftModifyResponse(soap, data, "ns1:SoftModifyResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftModifyResponse * SOAP_FMAC4 soap_get_ns1__SoftModifyResponse(struct soap*, struct ns1__SoftModifyResponse *, const char*, const char*);

#ifndef soap_read_ns1__SoftModifyResponse
#define soap_read_ns1__SoftModifyResponse(soap, data) ( ((data) ? (soap_default_ns1__SoftModifyResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftModifyResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftModifyResponse
#define soap_GET_ns1__SoftModifyResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftModifyResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftModifyResponse
#define soap_POST_recv_ns1__SoftModifyResponse(soap, data) ( soap_read_ns1__SoftModifyResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftCancel_DEFINED
#define SOAP_TYPE_ns1__SoftCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftCancel(struct soap*, struct ns1__SoftCancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftCancel(struct soap*, const struct ns1__SoftCancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftCancel(struct soap*, const char*, int, const struct ns1__SoftCancel *, const char*);
SOAP_FMAC3 struct ns1__SoftCancel * SOAP_FMAC4 soap_in_ns1__SoftCancel(struct soap*, const char*, struct ns1__SoftCancel *, const char*);

SOAP_FMAC3 struct ns1__SoftCancel * SOAP_FMAC4 soap_new_ns1__SoftCancel(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftCancel(struct soap*, const struct ns1__SoftCancel *, const char*, const char*);

#ifndef soap_write_ns1__SoftCancel
#define soap_write_ns1__SoftCancel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftCancel(soap, data), 0) || soap_put_ns1__SoftCancel(soap, data, "ns1:SoftCancel", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftCancel
#define soap_PUT_ns1__SoftCancel(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftCancel(soap, data), 0) || soap_put_ns1__SoftCancel(soap, data, "ns1:SoftCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftCancel
#define soap_PATCH_ns1__SoftCancel(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftCancel(soap, data), 0) || soap_put_ns1__SoftCancel(soap, data, "ns1:SoftCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftCancel
#define soap_POST_send_ns1__SoftCancel(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftCancel(soap, data), 0) || soap_put_ns1__SoftCancel(soap, data, "ns1:SoftCancel", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftCancel * SOAP_FMAC4 soap_get_ns1__SoftCancel(struct soap*, struct ns1__SoftCancel *, const char*, const char*);

#ifndef soap_read_ns1__SoftCancel
#define soap_read_ns1__SoftCancel(soap, data) ( ((data) ? (soap_default_ns1__SoftCancel(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftCancel(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftCancel
#define soap_GET_ns1__SoftCancel(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftCancel(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftCancel
#define soap_POST_recv_ns1__SoftCancel(soap, data) ( soap_read_ns1__SoftCancel(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftCancelResponse_DEFINED
#define SOAP_TYPE_ns1__SoftCancelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftCancelResponse(struct soap*, struct ns1__SoftCancelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftCancelResponse(struct soap*, const struct ns1__SoftCancelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftCancelResponse(struct soap*, const char*, int, const struct ns1__SoftCancelResponse *, const char*);
SOAP_FMAC3 struct ns1__SoftCancelResponse * SOAP_FMAC4 soap_in_ns1__SoftCancelResponse(struct soap*, const char*, struct ns1__SoftCancelResponse *, const char*);

SOAP_FMAC3 struct ns1__SoftCancelResponse * SOAP_FMAC4 soap_new_ns1__SoftCancelResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftCancelResponse(struct soap*, const struct ns1__SoftCancelResponse *, const char*, const char*);

#ifndef soap_write_ns1__SoftCancelResponse
#define soap_write_ns1__SoftCancelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftCancelResponse(soap, data), 0) || soap_put_ns1__SoftCancelResponse(soap, data, "ns1:SoftCancelResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftCancelResponse
#define soap_PUT_ns1__SoftCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftCancelResponse(soap, data), 0) || soap_put_ns1__SoftCancelResponse(soap, data, "ns1:SoftCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftCancelResponse
#define soap_PATCH_ns1__SoftCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftCancelResponse(soap, data), 0) || soap_put_ns1__SoftCancelResponse(soap, data, "ns1:SoftCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftCancelResponse
#define soap_POST_send_ns1__SoftCancelResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftCancelResponse(soap, data), 0) || soap_put_ns1__SoftCancelResponse(soap, data, "ns1:SoftCancelResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftCancelResponse * SOAP_FMAC4 soap_get_ns1__SoftCancelResponse(struct soap*, struct ns1__SoftCancelResponse *, const char*, const char*);

#ifndef soap_read_ns1__SoftCancelResponse
#define soap_read_ns1__SoftCancelResponse(soap, data) ( ((data) ? (soap_default_ns1__SoftCancelResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftCancelResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftCancelResponse
#define soap_GET_ns1__SoftCancelResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftCancelResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftCancelResponse
#define soap_POST_recv_ns1__SoftCancelResponse(soap, data) ( soap_read_ns1__SoftCancelResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceListGet_DEFINED
#define SOAP_TYPE_ns1__DeviceListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceListGet(struct soap*, struct ns1__DeviceListGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceListGet(struct soap*, const struct ns1__DeviceListGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceListGet(struct soap*, const char*, int, const struct ns1__DeviceListGet *, const char*);
SOAP_FMAC3 struct ns1__DeviceListGet * SOAP_FMAC4 soap_in_ns1__DeviceListGet(struct soap*, const char*, struct ns1__DeviceListGet *, const char*);

SOAP_FMAC3 struct ns1__DeviceListGet * SOAP_FMAC4 soap_new_ns1__DeviceListGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceListGet(struct soap*, const struct ns1__DeviceListGet *, const char*, const char*);

#ifndef soap_write_ns1__DeviceListGet
#define soap_write_ns1__DeviceListGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceListGet(soap, data), 0) || soap_put_ns1__DeviceListGet(soap, data, "ns1:DeviceListGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceListGet
#define soap_PUT_ns1__DeviceListGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceListGet(soap, data), 0) || soap_put_ns1__DeviceListGet(soap, data, "ns1:DeviceListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceListGet
#define soap_PATCH_ns1__DeviceListGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceListGet(soap, data), 0) || soap_put_ns1__DeviceListGet(soap, data, "ns1:DeviceListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceListGet
#define soap_POST_send_ns1__DeviceListGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceListGet(soap, data), 0) || soap_put_ns1__DeviceListGet(soap, data, "ns1:DeviceListGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceListGet * SOAP_FMAC4 soap_get_ns1__DeviceListGet(struct soap*, struct ns1__DeviceListGet *, const char*, const char*);

#ifndef soap_read_ns1__DeviceListGet
#define soap_read_ns1__DeviceListGet(soap, data) ( ((data) ? (soap_default_ns1__DeviceListGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceListGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceListGet
#define soap_GET_ns1__DeviceListGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceListGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceListGet
#define soap_POST_recv_ns1__DeviceListGet(soap, data) ( soap_read_ns1__DeviceListGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceListGetResponse_DEFINED
#define SOAP_TYPE_ns1__DeviceListGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceListGetResponse(struct soap*, struct ns1__DeviceListGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceListGetResponse(struct soap*, const struct ns1__DeviceListGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceListGetResponse(struct soap*, const char*, int, const struct ns1__DeviceListGetResponse *, const char*);
SOAP_FMAC3 struct ns1__DeviceListGetResponse * SOAP_FMAC4 soap_in_ns1__DeviceListGetResponse(struct soap*, const char*, struct ns1__DeviceListGetResponse *, const char*);

SOAP_FMAC3 struct ns1__DeviceListGetResponse * SOAP_FMAC4 soap_new_ns1__DeviceListGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceListGetResponse(struct soap*, const struct ns1__DeviceListGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__DeviceListGetResponse
#define soap_write_ns1__DeviceListGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceListGetResponse(soap, data), 0) || soap_put_ns1__DeviceListGetResponse(soap, data, "ns1:DeviceListGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceListGetResponse
#define soap_PUT_ns1__DeviceListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceListGetResponse(soap, data), 0) || soap_put_ns1__DeviceListGetResponse(soap, data, "ns1:DeviceListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceListGetResponse
#define soap_PATCH_ns1__DeviceListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceListGetResponse(soap, data), 0) || soap_put_ns1__DeviceListGetResponse(soap, data, "ns1:DeviceListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceListGetResponse
#define soap_POST_send_ns1__DeviceListGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceListGetResponse(soap, data), 0) || soap_put_ns1__DeviceListGetResponse(soap, data, "ns1:DeviceListGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceListGetResponse * SOAP_FMAC4 soap_get_ns1__DeviceListGetResponse(struct soap*, struct ns1__DeviceListGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__DeviceListGetResponse
#define soap_read_ns1__DeviceListGetResponse(soap, data) ( ((data) ? (soap_default_ns1__DeviceListGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceListGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceListGetResponse
#define soap_GET_ns1__DeviceListGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceListGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceListGetResponse
#define soap_POST_recv_ns1__DeviceListGetResponse(soap, data) ( soap_read_ns1__DeviceListGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceModify_DEFINED
#define SOAP_TYPE_ns1__DeviceModify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceModify(struct soap*, struct ns1__DeviceModify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceModify(struct soap*, const struct ns1__DeviceModify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceModify(struct soap*, const char*, int, const struct ns1__DeviceModify *, const char*);
SOAP_FMAC3 struct ns1__DeviceModify * SOAP_FMAC4 soap_in_ns1__DeviceModify(struct soap*, const char*, struct ns1__DeviceModify *, const char*);

SOAP_FMAC3 struct ns1__DeviceModify * SOAP_FMAC4 soap_new_ns1__DeviceModify(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceModify(struct soap*, const struct ns1__DeviceModify *, const char*, const char*);

#ifndef soap_write_ns1__DeviceModify
#define soap_write_ns1__DeviceModify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceModify(soap, data), 0) || soap_put_ns1__DeviceModify(soap, data, "ns1:DeviceModify", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceModify
#define soap_PUT_ns1__DeviceModify(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceModify(soap, data), 0) || soap_put_ns1__DeviceModify(soap, data, "ns1:DeviceModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceModify
#define soap_PATCH_ns1__DeviceModify(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceModify(soap, data), 0) || soap_put_ns1__DeviceModify(soap, data, "ns1:DeviceModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceModify
#define soap_POST_send_ns1__DeviceModify(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceModify(soap, data), 0) || soap_put_ns1__DeviceModify(soap, data, "ns1:DeviceModify", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceModify * SOAP_FMAC4 soap_get_ns1__DeviceModify(struct soap*, struct ns1__DeviceModify *, const char*, const char*);

#ifndef soap_read_ns1__DeviceModify
#define soap_read_ns1__DeviceModify(soap, data) ( ((data) ? (soap_default_ns1__DeviceModify(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceModify(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceModify
#define soap_GET_ns1__DeviceModify(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceModify(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceModify
#define soap_POST_recv_ns1__DeviceModify(soap, data) ( soap_read_ns1__DeviceModify(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceModifyResponse_DEFINED
#define SOAP_TYPE_ns1__DeviceModifyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceModifyResponse(struct soap*, struct ns1__DeviceModifyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceModifyResponse(struct soap*, const struct ns1__DeviceModifyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceModifyResponse(struct soap*, const char*, int, const struct ns1__DeviceModifyResponse *, const char*);
SOAP_FMAC3 struct ns1__DeviceModifyResponse * SOAP_FMAC4 soap_in_ns1__DeviceModifyResponse(struct soap*, const char*, struct ns1__DeviceModifyResponse *, const char*);

SOAP_FMAC3 struct ns1__DeviceModifyResponse * SOAP_FMAC4 soap_new_ns1__DeviceModifyResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceModifyResponse(struct soap*, const struct ns1__DeviceModifyResponse *, const char*, const char*);

#ifndef soap_write_ns1__DeviceModifyResponse
#define soap_write_ns1__DeviceModifyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceModifyResponse(soap, data), 0) || soap_put_ns1__DeviceModifyResponse(soap, data, "ns1:DeviceModifyResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceModifyResponse
#define soap_PUT_ns1__DeviceModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceModifyResponse(soap, data), 0) || soap_put_ns1__DeviceModifyResponse(soap, data, "ns1:DeviceModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceModifyResponse
#define soap_PATCH_ns1__DeviceModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceModifyResponse(soap, data), 0) || soap_put_ns1__DeviceModifyResponse(soap, data, "ns1:DeviceModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceModifyResponse
#define soap_POST_send_ns1__DeviceModifyResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceModifyResponse(soap, data), 0) || soap_put_ns1__DeviceModifyResponse(soap, data, "ns1:DeviceModifyResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceModifyResponse * SOAP_FMAC4 soap_get_ns1__DeviceModifyResponse(struct soap*, struct ns1__DeviceModifyResponse *, const char*, const char*);

#ifndef soap_read_ns1__DeviceModifyResponse
#define soap_read_ns1__DeviceModifyResponse(soap, data) ( ((data) ? (soap_default_ns1__DeviceModifyResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceModifyResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceModifyResponse
#define soap_GET_ns1__DeviceModifyResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceModifyResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceModifyResponse
#define soap_POST_recv_ns1__DeviceModifyResponse(soap, data) ( soap_read_ns1__DeviceModifyResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceCancel_DEFINED
#define SOAP_TYPE_ns1__DeviceCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceCancel(struct soap*, struct ns1__DeviceCancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceCancel(struct soap*, const struct ns1__DeviceCancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceCancel(struct soap*, const char*, int, const struct ns1__DeviceCancel *, const char*);
SOAP_FMAC3 struct ns1__DeviceCancel * SOAP_FMAC4 soap_in_ns1__DeviceCancel(struct soap*, const char*, struct ns1__DeviceCancel *, const char*);

SOAP_FMAC3 struct ns1__DeviceCancel * SOAP_FMAC4 soap_new_ns1__DeviceCancel(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceCancel(struct soap*, const struct ns1__DeviceCancel *, const char*, const char*);

#ifndef soap_write_ns1__DeviceCancel
#define soap_write_ns1__DeviceCancel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceCancel(soap, data), 0) || soap_put_ns1__DeviceCancel(soap, data, "ns1:DeviceCancel", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceCancel
#define soap_PUT_ns1__DeviceCancel(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceCancel(soap, data), 0) || soap_put_ns1__DeviceCancel(soap, data, "ns1:DeviceCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceCancel
#define soap_PATCH_ns1__DeviceCancel(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceCancel(soap, data), 0) || soap_put_ns1__DeviceCancel(soap, data, "ns1:DeviceCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceCancel
#define soap_POST_send_ns1__DeviceCancel(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceCancel(soap, data), 0) || soap_put_ns1__DeviceCancel(soap, data, "ns1:DeviceCancel", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceCancel * SOAP_FMAC4 soap_get_ns1__DeviceCancel(struct soap*, struct ns1__DeviceCancel *, const char*, const char*);

#ifndef soap_read_ns1__DeviceCancel
#define soap_read_ns1__DeviceCancel(soap, data) ( ((data) ? (soap_default_ns1__DeviceCancel(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceCancel(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceCancel
#define soap_GET_ns1__DeviceCancel(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceCancel(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceCancel
#define soap_POST_recv_ns1__DeviceCancel(soap, data) ( soap_read_ns1__DeviceCancel(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceCancelResponse_DEFINED
#define SOAP_TYPE_ns1__DeviceCancelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceCancelResponse(struct soap*, struct ns1__DeviceCancelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceCancelResponse(struct soap*, const struct ns1__DeviceCancelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceCancelResponse(struct soap*, const char*, int, const struct ns1__DeviceCancelResponse *, const char*);
SOAP_FMAC3 struct ns1__DeviceCancelResponse * SOAP_FMAC4 soap_in_ns1__DeviceCancelResponse(struct soap*, const char*, struct ns1__DeviceCancelResponse *, const char*);

SOAP_FMAC3 struct ns1__DeviceCancelResponse * SOAP_FMAC4 soap_new_ns1__DeviceCancelResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceCancelResponse(struct soap*, const struct ns1__DeviceCancelResponse *, const char*, const char*);

#ifndef soap_write_ns1__DeviceCancelResponse
#define soap_write_ns1__DeviceCancelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceCancelResponse(soap, data), 0) || soap_put_ns1__DeviceCancelResponse(soap, data, "ns1:DeviceCancelResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceCancelResponse
#define soap_PUT_ns1__DeviceCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceCancelResponse(soap, data), 0) || soap_put_ns1__DeviceCancelResponse(soap, data, "ns1:DeviceCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceCancelResponse
#define soap_PATCH_ns1__DeviceCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceCancelResponse(soap, data), 0) || soap_put_ns1__DeviceCancelResponse(soap, data, "ns1:DeviceCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceCancelResponse
#define soap_POST_send_ns1__DeviceCancelResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceCancelResponse(soap, data), 0) || soap_put_ns1__DeviceCancelResponse(soap, data, "ns1:DeviceCancelResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceCancelResponse * SOAP_FMAC4 soap_get_ns1__DeviceCancelResponse(struct soap*, struct ns1__DeviceCancelResponse *, const char*, const char*);

#ifndef soap_read_ns1__DeviceCancelResponse
#define soap_read_ns1__DeviceCancelResponse(soap, data) ( ((data) ? (soap_default_ns1__DeviceCancelResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceCancelResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceCancelResponse
#define soap_GET_ns1__DeviceCancelResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceCancelResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceCancelResponse
#define soap_POST_recv_ns1__DeviceCancelResponse(soap, data) ( soap_read_ns1__DeviceCancelResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DataDefine_DEFINED
#define SOAP_TYPE_ns1__DataDefine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataDefine(struct soap*, struct ns1__DataDefine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataDefine(struct soap*, const struct ns1__DataDefine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataDefine(struct soap*, const char*, int, const struct ns1__DataDefine *, const char*);
SOAP_FMAC3 struct ns1__DataDefine * SOAP_FMAC4 soap_in_ns1__DataDefine(struct soap*, const char*, struct ns1__DataDefine *, const char*);

SOAP_FMAC3 struct ns1__DataDefine * SOAP_FMAC4 soap_new_ns1__DataDefine(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataDefine(struct soap*, const struct ns1__DataDefine *, const char*, const char*);

#ifndef soap_write_ns1__DataDefine
#define soap_write_ns1__DataDefine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataDefine(soap, data), 0) || soap_put_ns1__DataDefine(soap, data, "ns1:DataDefine", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataDefine
#define soap_PUT_ns1__DataDefine(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataDefine(soap, data), 0) || soap_put_ns1__DataDefine(soap, data, "ns1:DataDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataDefine
#define soap_PATCH_ns1__DataDefine(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataDefine(soap, data), 0) || soap_put_ns1__DataDefine(soap, data, "ns1:DataDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataDefine
#define soap_POST_send_ns1__DataDefine(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataDefine(soap, data), 0) || soap_put_ns1__DataDefine(soap, data, "ns1:DataDefine", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataDefine * SOAP_FMAC4 soap_get_ns1__DataDefine(struct soap*, struct ns1__DataDefine *, const char*, const char*);

#ifndef soap_read_ns1__DataDefine
#define soap_read_ns1__DataDefine(soap, data) ( ((data) ? (soap_default_ns1__DataDefine(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataDefine(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataDefine
#define soap_GET_ns1__DataDefine(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataDefine(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataDefine
#define soap_POST_recv_ns1__DataDefine(soap, data) ( soap_read_ns1__DataDefine(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DataDefineResponse_DEFINED
#define SOAP_TYPE_ns1__DataDefineResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataDefineResponse(struct soap*, struct ns1__DataDefineResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataDefineResponse(struct soap*, const struct ns1__DataDefineResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataDefineResponse(struct soap*, const char*, int, const struct ns1__DataDefineResponse *, const char*);
SOAP_FMAC3 struct ns1__DataDefineResponse * SOAP_FMAC4 soap_in_ns1__DataDefineResponse(struct soap*, const char*, struct ns1__DataDefineResponse *, const char*);

SOAP_FMAC3 struct ns1__DataDefineResponse * SOAP_FMAC4 soap_new_ns1__DataDefineResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataDefineResponse(struct soap*, const struct ns1__DataDefineResponse *, const char*, const char*);

#ifndef soap_write_ns1__DataDefineResponse
#define soap_write_ns1__DataDefineResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataDefineResponse(soap, data), 0) || soap_put_ns1__DataDefineResponse(soap, data, "ns1:DataDefineResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataDefineResponse
#define soap_PUT_ns1__DataDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataDefineResponse(soap, data), 0) || soap_put_ns1__DataDefineResponse(soap, data, "ns1:DataDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataDefineResponse
#define soap_PATCH_ns1__DataDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataDefineResponse(soap, data), 0) || soap_put_ns1__DataDefineResponse(soap, data, "ns1:DataDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataDefineResponse
#define soap_POST_send_ns1__DataDefineResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataDefineResponse(soap, data), 0) || soap_put_ns1__DataDefineResponse(soap, data, "ns1:DataDefineResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataDefineResponse * SOAP_FMAC4 soap_get_ns1__DataDefineResponse(struct soap*, struct ns1__DataDefineResponse *, const char*, const char*);

#ifndef soap_read_ns1__DataDefineResponse
#define soap_read_ns1__DataDefineResponse(soap, data) ( ((data) ? (soap_default_ns1__DataDefineResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataDefineResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataDefineResponse
#define soap_GET_ns1__DataDefineResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataDefineResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataDefineResponse
#define soap_POST_recv_ns1__DataDefineResponse(soap, data) ( soap_read_ns1__DataDefineResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DataListGet_DEFINED
#define SOAP_TYPE_ns1__DataListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataListGet(struct soap*, struct ns1__DataListGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataListGet(struct soap*, const struct ns1__DataListGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataListGet(struct soap*, const char*, int, const struct ns1__DataListGet *, const char*);
SOAP_FMAC3 struct ns1__DataListGet * SOAP_FMAC4 soap_in_ns1__DataListGet(struct soap*, const char*, struct ns1__DataListGet *, const char*);

SOAP_FMAC3 struct ns1__DataListGet * SOAP_FMAC4 soap_new_ns1__DataListGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataListGet(struct soap*, const struct ns1__DataListGet *, const char*, const char*);

#ifndef soap_write_ns1__DataListGet
#define soap_write_ns1__DataListGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataListGet(soap, data), 0) || soap_put_ns1__DataListGet(soap, data, "ns1:DataListGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataListGet
#define soap_PUT_ns1__DataListGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataListGet(soap, data), 0) || soap_put_ns1__DataListGet(soap, data, "ns1:DataListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataListGet
#define soap_PATCH_ns1__DataListGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataListGet(soap, data), 0) || soap_put_ns1__DataListGet(soap, data, "ns1:DataListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataListGet
#define soap_POST_send_ns1__DataListGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataListGet(soap, data), 0) || soap_put_ns1__DataListGet(soap, data, "ns1:DataListGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataListGet * SOAP_FMAC4 soap_get_ns1__DataListGet(struct soap*, struct ns1__DataListGet *, const char*, const char*);

#ifndef soap_read_ns1__DataListGet
#define soap_read_ns1__DataListGet(soap, data) ( ((data) ? (soap_default_ns1__DataListGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataListGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataListGet
#define soap_GET_ns1__DataListGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataListGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataListGet
#define soap_POST_recv_ns1__DataListGet(soap, data) ( soap_read_ns1__DataListGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DataListGetResponse_DEFINED
#define SOAP_TYPE_ns1__DataListGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DataListGetResponse(struct soap*, struct ns1__DataListGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DataListGetResponse(struct soap*, const struct ns1__DataListGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DataListGetResponse(struct soap*, const char*, int, const struct ns1__DataListGetResponse *, const char*);
SOAP_FMAC3 struct ns1__DataListGetResponse * SOAP_FMAC4 soap_in_ns1__DataListGetResponse(struct soap*, const char*, struct ns1__DataListGetResponse *, const char*);

SOAP_FMAC3 struct ns1__DataListGetResponse * SOAP_FMAC4 soap_new_ns1__DataListGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DataListGetResponse(struct soap*, const struct ns1__DataListGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__DataListGetResponse
#define soap_write_ns1__DataListGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DataListGetResponse(soap, data), 0) || soap_put_ns1__DataListGetResponse(soap, data, "ns1:DataListGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DataListGetResponse
#define soap_PUT_ns1__DataListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataListGetResponse(soap, data), 0) || soap_put_ns1__DataListGetResponse(soap, data, "ns1:DataListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DataListGetResponse
#define soap_PATCH_ns1__DataListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataListGetResponse(soap, data), 0) || soap_put_ns1__DataListGetResponse(soap, data, "ns1:DataListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DataListGetResponse
#define soap_POST_send_ns1__DataListGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DataListGetResponse(soap, data), 0) || soap_put_ns1__DataListGetResponse(soap, data, "ns1:DataListGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DataListGetResponse * SOAP_FMAC4 soap_get_ns1__DataListGetResponse(struct soap*, struct ns1__DataListGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__DataListGetResponse
#define soap_read_ns1__DataListGetResponse(soap, data) ( ((data) ? (soap_default_ns1__DataListGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DataListGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DataListGetResponse
#define soap_GET_ns1__DataListGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DataListGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DataListGetResponse
#define soap_POST_recv_ns1__DataListGetResponse(soap, data) ( soap_read_ns1__DataListGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__Challenge_DEFINED
#define SOAP_TYPE_ns1__Challenge_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__Challenge(struct soap*, struct ns1__Challenge *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__Challenge(struct soap*, const struct ns1__Challenge *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Challenge(struct soap*, const char*, int, const struct ns1__Challenge *, const char*);
SOAP_FMAC3 struct ns1__Challenge * SOAP_FMAC4 soap_in_ns1__Challenge(struct soap*, const char*, struct ns1__Challenge *, const char*);

SOAP_FMAC3 struct ns1__Challenge * SOAP_FMAC4 soap_new_ns1__Challenge(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__Challenge(struct soap*, const struct ns1__Challenge *, const char*, const char*);

#ifndef soap_write_ns1__Challenge
#define soap_write_ns1__Challenge(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__Challenge
#define soap_PUT_ns1__Challenge(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__Challenge
#define soap_PATCH_ns1__Challenge(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__Challenge
#define soap_POST_send_ns1__Challenge(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__Challenge(soap, data), 0) || soap_put_ns1__Challenge(soap, data, "ns1:Challenge", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__Challenge * SOAP_FMAC4 soap_get_ns1__Challenge(struct soap*, struct ns1__Challenge *, const char*, const char*);

#ifndef soap_read_ns1__Challenge
#define soap_read_ns1__Challenge(soap, data) ( ((data) ? (soap_default_ns1__Challenge(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__Challenge(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__Challenge
#define soap_GET_ns1__Challenge(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__Challenge(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__Challenge
#define soap_POST_recv_ns1__Challenge(soap, data) ( soap_read_ns1__Challenge(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__ChallengeResponse_DEFINED
#define SOAP_TYPE_ns1__ChallengeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__ChallengeResponse(struct soap*, struct ns1__ChallengeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__ChallengeResponse(struct soap*, const struct ns1__ChallengeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ChallengeResponse(struct soap*, const char*, int, const struct ns1__ChallengeResponse *, const char*);
SOAP_FMAC3 struct ns1__ChallengeResponse * SOAP_FMAC4 soap_in_ns1__ChallengeResponse(struct soap*, const char*, struct ns1__ChallengeResponse *, const char*);

SOAP_FMAC3 struct ns1__ChallengeResponse * SOAP_FMAC4 soap_new_ns1__ChallengeResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__ChallengeResponse(struct soap*, const struct ns1__ChallengeResponse *, const char*, const char*);

#ifndef soap_write_ns1__ChallengeResponse
#define soap_write_ns1__ChallengeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__ChallengeResponse
#define soap_PUT_ns1__ChallengeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__ChallengeResponse
#define soap_PATCH_ns1__ChallengeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__ChallengeResponse
#define soap_POST_send_ns1__ChallengeResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__ChallengeResponse(soap, data), 0) || soap_put_ns1__ChallengeResponse(soap, data, "ns1:ChallengeResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__ChallengeResponse * SOAP_FMAC4 soap_get_ns1__ChallengeResponse(struct soap*, struct ns1__ChallengeResponse *, const char*, const char*);

#ifndef soap_read_ns1__ChallengeResponse
#define soap_read_ns1__ChallengeResponse(soap, data) ( ((data) ? (soap_default_ns1__ChallengeResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__ChallengeResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__ChallengeResponse
#define soap_GET_ns1__ChallengeResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__ChallengeResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__ChallengeResponse
#define soap_POST_recv_ns1__ChallengeResponse(soap, data) ( soap_read_ns1__ChallengeResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftDefine_DEFINED
#define SOAP_TYPE_ns1__SoftDefine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftDefine(struct soap*, struct ns1__SoftDefine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftDefine(struct soap*, const struct ns1__SoftDefine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftDefine(struct soap*, const char*, int, const struct ns1__SoftDefine *, const char*);
SOAP_FMAC3 struct ns1__SoftDefine * SOAP_FMAC4 soap_in_ns1__SoftDefine(struct soap*, const char*, struct ns1__SoftDefine *, const char*);

SOAP_FMAC3 struct ns1__SoftDefine * SOAP_FMAC4 soap_new_ns1__SoftDefine(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftDefine(struct soap*, const struct ns1__SoftDefine *, const char*, const char*);

#ifndef soap_write_ns1__SoftDefine
#define soap_write_ns1__SoftDefine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftDefine(soap, data), 0) || soap_put_ns1__SoftDefine(soap, data, "ns1:SoftDefine", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftDefine
#define soap_PUT_ns1__SoftDefine(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftDefine(soap, data), 0) || soap_put_ns1__SoftDefine(soap, data, "ns1:SoftDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftDefine
#define soap_PATCH_ns1__SoftDefine(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftDefine(soap, data), 0) || soap_put_ns1__SoftDefine(soap, data, "ns1:SoftDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftDefine
#define soap_POST_send_ns1__SoftDefine(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftDefine(soap, data), 0) || soap_put_ns1__SoftDefine(soap, data, "ns1:SoftDefine", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftDefine * SOAP_FMAC4 soap_get_ns1__SoftDefine(struct soap*, struct ns1__SoftDefine *, const char*, const char*);

#ifndef soap_read_ns1__SoftDefine
#define soap_read_ns1__SoftDefine(soap, data) ( ((data) ? (soap_default_ns1__SoftDefine(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftDefine(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftDefine
#define soap_GET_ns1__SoftDefine(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftDefine(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftDefine
#define soap_POST_recv_ns1__SoftDefine(soap, data) ( soap_read_ns1__SoftDefine(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftDefineResponse_DEFINED
#define SOAP_TYPE_ns1__SoftDefineResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftDefineResponse(struct soap*, struct ns1__SoftDefineResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftDefineResponse(struct soap*, const struct ns1__SoftDefineResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftDefineResponse(struct soap*, const char*, int, const struct ns1__SoftDefineResponse *, const char*);
SOAP_FMAC3 struct ns1__SoftDefineResponse * SOAP_FMAC4 soap_in_ns1__SoftDefineResponse(struct soap*, const char*, struct ns1__SoftDefineResponse *, const char*);

SOAP_FMAC3 struct ns1__SoftDefineResponse * SOAP_FMAC4 soap_new_ns1__SoftDefineResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftDefineResponse(struct soap*, const struct ns1__SoftDefineResponse *, const char*, const char*);

#ifndef soap_write_ns1__SoftDefineResponse
#define soap_write_ns1__SoftDefineResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftDefineResponse(soap, data), 0) || soap_put_ns1__SoftDefineResponse(soap, data, "ns1:SoftDefineResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftDefineResponse
#define soap_PUT_ns1__SoftDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftDefineResponse(soap, data), 0) || soap_put_ns1__SoftDefineResponse(soap, data, "ns1:SoftDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftDefineResponse
#define soap_PATCH_ns1__SoftDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftDefineResponse(soap, data), 0) || soap_put_ns1__SoftDefineResponse(soap, data, "ns1:SoftDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftDefineResponse
#define soap_POST_send_ns1__SoftDefineResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftDefineResponse(soap, data), 0) || soap_put_ns1__SoftDefineResponse(soap, data, "ns1:SoftDefineResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftDefineResponse * SOAP_FMAC4 soap_get_ns1__SoftDefineResponse(struct soap*, struct ns1__SoftDefineResponse *, const char*, const char*);

#ifndef soap_read_ns1__SoftDefineResponse
#define soap_read_ns1__SoftDefineResponse(soap, data) ( ((data) ? (soap_default_ns1__SoftDefineResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftDefineResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftDefineResponse
#define soap_GET_ns1__SoftDefineResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftDefineResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftDefineResponse
#define soap_POST_recv_ns1__SoftDefineResponse(soap, data) ( soap_read_ns1__SoftDefineResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftListGet_DEFINED
#define SOAP_TYPE_ns1__SoftListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftListGet(struct soap*, struct ns1__SoftListGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftListGet(struct soap*, const struct ns1__SoftListGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftListGet(struct soap*, const char*, int, const struct ns1__SoftListGet *, const char*);
SOAP_FMAC3 struct ns1__SoftListGet * SOAP_FMAC4 soap_in_ns1__SoftListGet(struct soap*, const char*, struct ns1__SoftListGet *, const char*);

SOAP_FMAC3 struct ns1__SoftListGet * SOAP_FMAC4 soap_new_ns1__SoftListGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftListGet(struct soap*, const struct ns1__SoftListGet *, const char*, const char*);

#ifndef soap_write_ns1__SoftListGet
#define soap_write_ns1__SoftListGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftListGet(soap, data), 0) || soap_put_ns1__SoftListGet(soap, data, "ns1:SoftListGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftListGet
#define soap_PUT_ns1__SoftListGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftListGet(soap, data), 0) || soap_put_ns1__SoftListGet(soap, data, "ns1:SoftListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftListGet
#define soap_PATCH_ns1__SoftListGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftListGet(soap, data), 0) || soap_put_ns1__SoftListGet(soap, data, "ns1:SoftListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftListGet
#define soap_POST_send_ns1__SoftListGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftListGet(soap, data), 0) || soap_put_ns1__SoftListGet(soap, data, "ns1:SoftListGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftListGet * SOAP_FMAC4 soap_get_ns1__SoftListGet(struct soap*, struct ns1__SoftListGet *, const char*, const char*);

#ifndef soap_read_ns1__SoftListGet
#define soap_read_ns1__SoftListGet(soap, data) ( ((data) ? (soap_default_ns1__SoftListGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftListGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftListGet
#define soap_GET_ns1__SoftListGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftListGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftListGet
#define soap_POST_recv_ns1__SoftListGet(soap, data) ( soap_read_ns1__SoftListGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__SoftListGetResponse_DEFINED
#define SOAP_TYPE_ns1__SoftListGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__SoftListGetResponse(struct soap*, struct ns1__SoftListGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__SoftListGetResponse(struct soap*, const struct ns1__SoftListGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SoftListGetResponse(struct soap*, const char*, int, const struct ns1__SoftListGetResponse *, const char*);
SOAP_FMAC3 struct ns1__SoftListGetResponse * SOAP_FMAC4 soap_in_ns1__SoftListGetResponse(struct soap*, const char*, struct ns1__SoftListGetResponse *, const char*);

SOAP_FMAC3 struct ns1__SoftListGetResponse * SOAP_FMAC4 soap_new_ns1__SoftListGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__SoftListGetResponse(struct soap*, const struct ns1__SoftListGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__SoftListGetResponse
#define soap_write_ns1__SoftListGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__SoftListGetResponse(soap, data), 0) || soap_put_ns1__SoftListGetResponse(soap, data, "ns1:SoftListGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__SoftListGetResponse
#define soap_PUT_ns1__SoftListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftListGetResponse(soap, data), 0) || soap_put_ns1__SoftListGetResponse(soap, data, "ns1:SoftListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__SoftListGetResponse
#define soap_PATCH_ns1__SoftListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftListGetResponse(soap, data), 0) || soap_put_ns1__SoftListGetResponse(soap, data, "ns1:SoftListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__SoftListGetResponse
#define soap_POST_send_ns1__SoftListGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__SoftListGetResponse(soap, data), 0) || soap_put_ns1__SoftListGetResponse(soap, data, "ns1:SoftListGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__SoftListGetResponse * SOAP_FMAC4 soap_get_ns1__SoftListGetResponse(struct soap*, struct ns1__SoftListGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__SoftListGetResponse
#define soap_read_ns1__SoftListGetResponse(soap, data) ( ((data) ? (soap_default_ns1__SoftListGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__SoftListGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__SoftListGetResponse
#define soap_GET_ns1__SoftListGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__SoftListGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__SoftListGetResponse
#define soap_POST_recv_ns1__SoftListGetResponse(soap, data) ( soap_read_ns1__SoftListGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceDefine_DEFINED
#define SOAP_TYPE_ns1__DeviceDefine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceDefine(struct soap*, struct ns1__DeviceDefine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceDefine(struct soap*, const struct ns1__DeviceDefine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceDefine(struct soap*, const char*, int, const struct ns1__DeviceDefine *, const char*);
SOAP_FMAC3 struct ns1__DeviceDefine * SOAP_FMAC4 soap_in_ns1__DeviceDefine(struct soap*, const char*, struct ns1__DeviceDefine *, const char*);

SOAP_FMAC3 struct ns1__DeviceDefine * SOAP_FMAC4 soap_new_ns1__DeviceDefine(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceDefine(struct soap*, const struct ns1__DeviceDefine *, const char*, const char*);

#ifndef soap_write_ns1__DeviceDefine
#define soap_write_ns1__DeviceDefine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceDefine(soap, data), 0) || soap_put_ns1__DeviceDefine(soap, data, "ns1:DeviceDefine", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceDefine
#define soap_PUT_ns1__DeviceDefine(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceDefine(soap, data), 0) || soap_put_ns1__DeviceDefine(soap, data, "ns1:DeviceDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceDefine
#define soap_PATCH_ns1__DeviceDefine(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceDefine(soap, data), 0) || soap_put_ns1__DeviceDefine(soap, data, "ns1:DeviceDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceDefine
#define soap_POST_send_ns1__DeviceDefine(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceDefine(soap, data), 0) || soap_put_ns1__DeviceDefine(soap, data, "ns1:DeviceDefine", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceDefine * SOAP_FMAC4 soap_get_ns1__DeviceDefine(struct soap*, struct ns1__DeviceDefine *, const char*, const char*);

#ifndef soap_read_ns1__DeviceDefine
#define soap_read_ns1__DeviceDefine(soap, data) ( ((data) ? (soap_default_ns1__DeviceDefine(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceDefine(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceDefine
#define soap_GET_ns1__DeviceDefine(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceDefine(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceDefine
#define soap_POST_recv_ns1__DeviceDefine(soap, data) ( soap_read_ns1__DeviceDefine(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__DeviceDefineResponse_DEFINED
#define SOAP_TYPE_ns1__DeviceDefineResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__DeviceDefineResponse(struct soap*, struct ns1__DeviceDefineResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__DeviceDefineResponse(struct soap*, const struct ns1__DeviceDefineResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceDefineResponse(struct soap*, const char*, int, const struct ns1__DeviceDefineResponse *, const char*);
SOAP_FMAC3 struct ns1__DeviceDefineResponse * SOAP_FMAC4 soap_in_ns1__DeviceDefineResponse(struct soap*, const char*, struct ns1__DeviceDefineResponse *, const char*);

SOAP_FMAC3 struct ns1__DeviceDefineResponse * SOAP_FMAC4 soap_new_ns1__DeviceDefineResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__DeviceDefineResponse(struct soap*, const struct ns1__DeviceDefineResponse *, const char*, const char*);

#ifndef soap_write_ns1__DeviceDefineResponse
#define soap_write_ns1__DeviceDefineResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__DeviceDefineResponse(soap, data), 0) || soap_put_ns1__DeviceDefineResponse(soap, data, "ns1:DeviceDefineResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__DeviceDefineResponse
#define soap_PUT_ns1__DeviceDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceDefineResponse(soap, data), 0) || soap_put_ns1__DeviceDefineResponse(soap, data, "ns1:DeviceDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__DeviceDefineResponse
#define soap_PATCH_ns1__DeviceDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceDefineResponse(soap, data), 0) || soap_put_ns1__DeviceDefineResponse(soap, data, "ns1:DeviceDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__DeviceDefineResponse
#define soap_POST_send_ns1__DeviceDefineResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__DeviceDefineResponse(soap, data), 0) || soap_put_ns1__DeviceDefineResponse(soap, data, "ns1:DeviceDefineResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__DeviceDefineResponse * SOAP_FMAC4 soap_get_ns1__DeviceDefineResponse(struct soap*, struct ns1__DeviceDefineResponse *, const char*, const char*);

#ifndef soap_read_ns1__DeviceDefineResponse
#define soap_read_ns1__DeviceDefineResponse(soap, data) ( ((data) ? (soap_default_ns1__DeviceDefineResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__DeviceDefineResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__DeviceDefineResponse
#define soap_GET_ns1__DeviceDefineResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceDefineResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__DeviceDefineResponse
#define soap_POST_recv_ns1__DeviceDefineResponse(soap, data) ( soap_read_ns1__DeviceDefineResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__addDeviceBatch_DEFINED
#define SOAP_TYPE_ns1__addDeviceBatch_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDeviceBatch(struct soap*, struct ns1__addDeviceBatch *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDeviceBatch(struct soap*, const struct ns1__addDeviceBatch *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDeviceBatch(struct soap*, const char*, int, const struct ns1__addDeviceBatch *, const char*);
SOAP_FMAC3 struct ns1__addDeviceBatch * SOAP_FMAC4 soap_in_ns1__addDeviceBatch(struct soap*, const char*, struct ns1__addDeviceBatch *, const char*);

SOAP_FMAC3 struct ns1__addDeviceBatch * SOAP_FMAC4 soap_new_ns1__addDeviceBatch(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDeviceBatch(struct soap*, const struct ns1__addDeviceBatch *, const char*, const char*);

#ifndef soap_write_ns1__addDeviceBatch
#define soap_write_ns1__addDeviceBatch(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addDeviceBatch(soap, data), 0) || soap_put_ns1__addDeviceBatch(soap, data, "ns1:addDeviceBatch", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__addDeviceBatch
#define soap_PUT_ns1__addDeviceBatch(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__addDeviceBatch(soap, data), 0) || soap_put_ns1__addDeviceBatch(soap, data, "ns1:addDeviceBatch", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__addDeviceBatch
#define soap_PATCH_ns1__addDeviceBatch(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__addDeviceBatch(soap, data), 0) || soap_put_ns1__addDeviceBatch(soap, data, "ns1:addDeviceBatch", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__addDeviceBatch
#define soap_POST_send_ns1__addDeviceBatch(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__addDeviceBatch(soap, data), 0) || soap_put_ns1__addDeviceBatch(soap, data, "ns1:addDeviceBatch", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addDeviceBatch * SOAP_FMAC4 soap_get_ns1__addDeviceBatch(struct soap*, struct ns1__addDeviceBatch *, const char*, const char*);

#ifndef soap_read_ns1__addDeviceBatch
#define soap_read_ns1__addDeviceBatch(soap, data) ( ((data) ? (soap_default_ns1__addDeviceBatch(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__addDeviceBatch(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__addDeviceBatch
#define soap_GET_ns1__addDeviceBatch(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__addDeviceBatch(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__addDeviceBatch
#define soap_POST_recv_ns1__addDeviceBatch(soap, data) ( soap_read_ns1__addDeviceBatch(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__addDeviceBatchResponse_DEFINED
#define SOAP_TYPE_ns1__addDeviceBatchResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addDeviceBatchResponse(struct soap*, struct ns1__addDeviceBatchResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addDeviceBatchResponse(struct soap*, const struct ns1__addDeviceBatchResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addDeviceBatchResponse(struct soap*, const char*, int, const struct ns1__addDeviceBatchResponse *, const char*);
SOAP_FMAC3 struct ns1__addDeviceBatchResponse * SOAP_FMAC4 soap_in_ns1__addDeviceBatchResponse(struct soap*, const char*, struct ns1__addDeviceBatchResponse *, const char*);

SOAP_FMAC3 struct ns1__addDeviceBatchResponse * SOAP_FMAC4 soap_new_ns1__addDeviceBatchResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addDeviceBatchResponse(struct soap*, const struct ns1__addDeviceBatchResponse *, const char*, const char*);

#ifndef soap_write_ns1__addDeviceBatchResponse
#define soap_write_ns1__addDeviceBatchResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addDeviceBatchResponse(soap, data), 0) || soap_put_ns1__addDeviceBatchResponse(soap, data, "ns1:addDeviceBatchResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__addDeviceBatchResponse
#define soap_PUT_ns1__addDeviceBatchResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__addDeviceBatchResponse(soap, data), 0) || soap_put_ns1__addDeviceBatchResponse(soap, data, "ns1:addDeviceBatchResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__addDeviceBatchResponse
#define soap_PATCH_ns1__addDeviceBatchResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__addDeviceBatchResponse(soap, data), 0) || soap_put_ns1__addDeviceBatchResponse(soap, data, "ns1:addDeviceBatchResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__addDeviceBatchResponse
#define soap_POST_send_ns1__addDeviceBatchResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__addDeviceBatchResponse(soap, data), 0) || soap_put_ns1__addDeviceBatchResponse(soap, data, "ns1:addDeviceBatchResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addDeviceBatchResponse * SOAP_FMAC4 soap_get_ns1__addDeviceBatchResponse(struct soap*, struct ns1__addDeviceBatchResponse *, const char*, const char*);

#ifndef soap_read_ns1__addDeviceBatchResponse
#define soap_read_ns1__addDeviceBatchResponse(soap, data) ( ((data) ? (soap_default_ns1__addDeviceBatchResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__addDeviceBatchResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__addDeviceBatchResponse
#define soap_GET_ns1__addDeviceBatchResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__addDeviceBatchResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__addDeviceBatchResponse
#define soap_POST_recv_ns1__addDeviceBatchResponse(soap, data) ( soap_read_ns1__addDeviceBatchResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__QName
#define soap_PATCH__QName(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_string
#define soap_PATCH_string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifdef __cplusplus
}
#endif

#endif

/* End of soapH.h */
