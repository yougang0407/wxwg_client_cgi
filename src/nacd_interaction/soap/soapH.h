/* soapH.h
   Generated by gSOAP 2.8.71 for soapH.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byte
#define soap_PATCH_byte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_int
#define soap_PATCH_int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Fault
#define soap_PATCH_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Reason
#define soap_PATCH_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Detail
#define soap_PATCH_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Code
#define soap_PATCH_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Header
#define soap_PATCH_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE___ns1__getResult___DEFINED
#define SOAP_TYPE___ns1__getResult___DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getResult__(struct soap*, struct __ns1__getResult__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getResult__(struct soap*, const struct __ns1__getResult__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getResult__(struct soap*, const char*, int, const struct __ns1__getResult__ *, const char*);
SOAP_FMAC3 struct __ns1__getResult__ * SOAP_FMAC4 soap_in___ns1__getResult__(struct soap*, const char*, struct __ns1__getResult__ *, const char*);

SOAP_FMAC3 struct __ns1__getResult__ * SOAP_FMAC4 soap_new___ns1__getResult__(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getResult__(struct soap*, const struct __ns1__getResult__ *, const char*, const char*);

#ifndef soap_write___ns1__getResult__
#define soap_write___ns1__getResult__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getResult__(soap, data), 0) || soap_put___ns1__getResult__(soap, data, "-ns1:getResult", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__getResult__
#define soap_PUT___ns1__getResult__(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult__(soap, data), 0) || soap_put___ns1__getResult__(soap, data, "-ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__getResult__
#define soap_PATCH___ns1__getResult__(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult__(soap, data), 0) || soap_put___ns1__getResult__(soap, data, "-ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__getResult__
#define soap_POST_send___ns1__getResult__(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult__(soap, data), 0) || soap_put___ns1__getResult__(soap, data, "-ns1:getResult", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getResult__ * SOAP_FMAC4 soap_get___ns1__getResult__(struct soap*, struct __ns1__getResult__ *, const char*, const char*);

#ifndef soap_read___ns1__getResult__
#define soap_read___ns1__getResult__(soap, data) ( ((data) ? (soap_default___ns1__getResult__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__getResult__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__getResult__
#define soap_GET___ns1__getResult__(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__getResult__(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__getResult__
#define soap_POST_recv___ns1__getResult__(soap, data) ( soap_read___ns1__getResult__(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__userDefine_DEFINED
#define SOAP_TYPE___ns1__userDefine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__userDefine(struct soap*, struct __ns1__userDefine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__userDefine(struct soap*, const struct __ns1__userDefine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__userDefine(struct soap*, const char*, int, const struct __ns1__userDefine *, const char*);
SOAP_FMAC3 struct __ns1__userDefine * SOAP_FMAC4 soap_in___ns1__userDefine(struct soap*, const char*, struct __ns1__userDefine *, const char*);

SOAP_FMAC3 struct __ns1__userDefine * SOAP_FMAC4 soap_new___ns1__userDefine(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__userDefine(struct soap*, const struct __ns1__userDefine *, const char*, const char*);

#ifndef soap_write___ns1__userDefine
#define soap_write___ns1__userDefine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__userDefine(soap, data), 0) || soap_put___ns1__userDefine(soap, data, "-ns1:userDefine", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__userDefine
#define soap_PUT___ns1__userDefine(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userDefine(soap, data), 0) || soap_put___ns1__userDefine(soap, data, "-ns1:userDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__userDefine
#define soap_PATCH___ns1__userDefine(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userDefine(soap, data), 0) || soap_put___ns1__userDefine(soap, data, "-ns1:userDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__userDefine
#define soap_POST_send___ns1__userDefine(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userDefine(soap, data), 0) || soap_put___ns1__userDefine(soap, data, "-ns1:userDefine", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__userDefine * SOAP_FMAC4 soap_get___ns1__userDefine(struct soap*, struct __ns1__userDefine *, const char*, const char*);

#ifndef soap_read___ns1__userDefine
#define soap_read___ns1__userDefine(soap, data) ( ((data) ? (soap_default___ns1__userDefine(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__userDefine(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__userDefine
#define soap_GET___ns1__userDefine(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__userDefine(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__userDefine
#define soap_POST_recv___ns1__userDefine(soap, data) ( soap_read___ns1__userDefine(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__userListGet_DEFINED
#define SOAP_TYPE___ns1__userListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__userListGet(struct soap*, struct __ns1__userListGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__userListGet(struct soap*, const struct __ns1__userListGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__userListGet(struct soap*, const char*, int, const struct __ns1__userListGet *, const char*);
SOAP_FMAC3 struct __ns1__userListGet * SOAP_FMAC4 soap_in___ns1__userListGet(struct soap*, const char*, struct __ns1__userListGet *, const char*);

SOAP_FMAC3 struct __ns1__userListGet * SOAP_FMAC4 soap_new___ns1__userListGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__userListGet(struct soap*, const struct __ns1__userListGet *, const char*, const char*);

#ifndef soap_write___ns1__userListGet
#define soap_write___ns1__userListGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__userListGet(soap, data), 0) || soap_put___ns1__userListGet(soap, data, "-ns1:userListGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__userListGet
#define soap_PUT___ns1__userListGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userListGet(soap, data), 0) || soap_put___ns1__userListGet(soap, data, "-ns1:userListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__userListGet
#define soap_PATCH___ns1__userListGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userListGet(soap, data), 0) || soap_put___ns1__userListGet(soap, data, "-ns1:userListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__userListGet
#define soap_POST_send___ns1__userListGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userListGet(soap, data), 0) || soap_put___ns1__userListGet(soap, data, "-ns1:userListGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__userListGet * SOAP_FMAC4 soap_get___ns1__userListGet(struct soap*, struct __ns1__userListGet *, const char*, const char*);

#ifndef soap_read___ns1__userListGet
#define soap_read___ns1__userListGet(soap, data) ( ((data) ? (soap_default___ns1__userListGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__userListGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__userListGet
#define soap_GET___ns1__userListGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__userListGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__userListGet
#define soap_POST_recv___ns1__userListGet(soap, data) ( soap_read___ns1__userListGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__verifyUserRN_DEFINED
#define SOAP_TYPE___ns1__verifyUserRN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__verifyUserRN(struct soap*, struct __ns1__verifyUserRN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__verifyUserRN(struct soap*, const struct __ns1__verifyUserRN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__verifyUserRN(struct soap*, const char*, int, const struct __ns1__verifyUserRN *, const char*);
SOAP_FMAC3 struct __ns1__verifyUserRN * SOAP_FMAC4 soap_in___ns1__verifyUserRN(struct soap*, const char*, struct __ns1__verifyUserRN *, const char*);

SOAP_FMAC3 struct __ns1__verifyUserRN * SOAP_FMAC4 soap_new___ns1__verifyUserRN(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__verifyUserRN(struct soap*, const struct __ns1__verifyUserRN *, const char*, const char*);

#ifndef soap_write___ns1__verifyUserRN
#define soap_write___ns1__verifyUserRN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__verifyUserRN(soap, data), 0) || soap_put___ns1__verifyUserRN(soap, data, "-ns1:verifyUserRN", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__verifyUserRN
#define soap_PUT___ns1__verifyUserRN(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__verifyUserRN(soap, data), 0) || soap_put___ns1__verifyUserRN(soap, data, "-ns1:verifyUserRN", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__verifyUserRN
#define soap_PATCH___ns1__verifyUserRN(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__verifyUserRN(soap, data), 0) || soap_put___ns1__verifyUserRN(soap, data, "-ns1:verifyUserRN", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__verifyUserRN
#define soap_POST_send___ns1__verifyUserRN(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__verifyUserRN(soap, data), 0) || soap_put___ns1__verifyUserRN(soap, data, "-ns1:verifyUserRN", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__verifyUserRN * SOAP_FMAC4 soap_get___ns1__verifyUserRN(struct soap*, struct __ns1__verifyUserRN *, const char*, const char*);

#ifndef soap_read___ns1__verifyUserRN
#define soap_read___ns1__verifyUserRN(soap, data) ( ((data) ? (soap_default___ns1__verifyUserRN(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__verifyUserRN(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__verifyUserRN
#define soap_GET___ns1__verifyUserRN(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__verifyUserRN(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__verifyUserRN
#define soap_POST_recv___ns1__verifyUserRN(soap, data) ( soap_read___ns1__verifyUserRN(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__userCancel_DEFINED
#define SOAP_TYPE___ns1__userCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__userCancel(struct soap*, struct __ns1__userCancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__userCancel(struct soap*, const struct __ns1__userCancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__userCancel(struct soap*, const char*, int, const struct __ns1__userCancel *, const char*);
SOAP_FMAC3 struct __ns1__userCancel * SOAP_FMAC4 soap_in___ns1__userCancel(struct soap*, const char*, struct __ns1__userCancel *, const char*);

SOAP_FMAC3 struct __ns1__userCancel * SOAP_FMAC4 soap_new___ns1__userCancel(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__userCancel(struct soap*, const struct __ns1__userCancel *, const char*, const char*);

#ifndef soap_write___ns1__userCancel
#define soap_write___ns1__userCancel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__userCancel(soap, data), 0) || soap_put___ns1__userCancel(soap, data, "-ns1:userCancel", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__userCancel
#define soap_PUT___ns1__userCancel(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userCancel(soap, data), 0) || soap_put___ns1__userCancel(soap, data, "-ns1:userCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__userCancel
#define soap_PATCH___ns1__userCancel(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userCancel(soap, data), 0) || soap_put___ns1__userCancel(soap, data, "-ns1:userCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__userCancel
#define soap_POST_send___ns1__userCancel(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userCancel(soap, data), 0) || soap_put___ns1__userCancel(soap, data, "-ns1:userCancel", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__userCancel * SOAP_FMAC4 soap_get___ns1__userCancel(struct soap*, struct __ns1__userCancel *, const char*, const char*);

#ifndef soap_read___ns1__userCancel
#define soap_read___ns1__userCancel(soap, data) ( ((data) ? (soap_default___ns1__userCancel(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__userCancel(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__userCancel
#define soap_GET___ns1__userCancel(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__userCancel(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__userCancel
#define soap_POST_recv___ns1__userCancel(soap, data) ( soap_read___ns1__userCancel(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__accessUnitGet_DEFINED
#define SOAP_TYPE___ns1__accessUnitGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__accessUnitGet(struct soap*, struct __ns1__accessUnitGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__accessUnitGet(struct soap*, const struct __ns1__accessUnitGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__accessUnitGet(struct soap*, const char*, int, const struct __ns1__accessUnitGet *, const char*);
SOAP_FMAC3 struct __ns1__accessUnitGet * SOAP_FMAC4 soap_in___ns1__accessUnitGet(struct soap*, const char*, struct __ns1__accessUnitGet *, const char*);

SOAP_FMAC3 struct __ns1__accessUnitGet * SOAP_FMAC4 soap_new___ns1__accessUnitGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__accessUnitGet(struct soap*, const struct __ns1__accessUnitGet *, const char*, const char*);

#ifndef soap_write___ns1__accessUnitGet
#define soap_write___ns1__accessUnitGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__accessUnitGet(soap, data), 0) || soap_put___ns1__accessUnitGet(soap, data, "-ns1:accessUnitGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__accessUnitGet
#define soap_PUT___ns1__accessUnitGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__accessUnitGet(soap, data), 0) || soap_put___ns1__accessUnitGet(soap, data, "-ns1:accessUnitGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__accessUnitGet
#define soap_PATCH___ns1__accessUnitGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__accessUnitGet(soap, data), 0) || soap_put___ns1__accessUnitGet(soap, data, "-ns1:accessUnitGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__accessUnitGet
#define soap_POST_send___ns1__accessUnitGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__accessUnitGet(soap, data), 0) || soap_put___ns1__accessUnitGet(soap, data, "-ns1:accessUnitGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__accessUnitGet * SOAP_FMAC4 soap_get___ns1__accessUnitGet(struct soap*, struct __ns1__accessUnitGet *, const char*, const char*);

#ifndef soap_read___ns1__accessUnitGet
#define soap_read___ns1__accessUnitGet(soap, data) ( ((data) ? (soap_default___ns1__accessUnitGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__accessUnitGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__accessUnitGet
#define soap_GET___ns1__accessUnitGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__accessUnitGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__accessUnitGet
#define soap_POST_recv___ns1__accessUnitGet(soap, data) ( soap_read___ns1__accessUnitGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__userRNCertGet_DEFINED
#define SOAP_TYPE___ns1__userRNCertGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__userRNCertGet(struct soap*, struct __ns1__userRNCertGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__userRNCertGet(struct soap*, const struct __ns1__userRNCertGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__userRNCertGet(struct soap*, const char*, int, const struct __ns1__userRNCertGet *, const char*);
SOAP_FMAC3 struct __ns1__userRNCertGet * SOAP_FMAC4 soap_in___ns1__userRNCertGet(struct soap*, const char*, struct __ns1__userRNCertGet *, const char*);

SOAP_FMAC3 struct __ns1__userRNCertGet * SOAP_FMAC4 soap_new___ns1__userRNCertGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__userRNCertGet(struct soap*, const struct __ns1__userRNCertGet *, const char*, const char*);

#ifndef soap_write___ns1__userRNCertGet
#define soap_write___ns1__userRNCertGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__userRNCertGet(soap, data), 0) || soap_put___ns1__userRNCertGet(soap, data, "-ns1:userRNCertGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__userRNCertGet
#define soap_PUT___ns1__userRNCertGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userRNCertGet(soap, data), 0) || soap_put___ns1__userRNCertGet(soap, data, "-ns1:userRNCertGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__userRNCertGet
#define soap_PATCH___ns1__userRNCertGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userRNCertGet(soap, data), 0) || soap_put___ns1__userRNCertGet(soap, data, "-ns1:userRNCertGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__userRNCertGet
#define soap_POST_send___ns1__userRNCertGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userRNCertGet(soap, data), 0) || soap_put___ns1__userRNCertGet(soap, data, "-ns1:userRNCertGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__userRNCertGet * SOAP_FMAC4 soap_get___ns1__userRNCertGet(struct soap*, struct __ns1__userRNCertGet *, const char*, const char*);

#ifndef soap_read___ns1__userRNCertGet
#define soap_read___ns1__userRNCertGet(soap, data) ( ((data) ? (soap_default___ns1__userRNCertGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__userRNCertGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__userRNCertGet
#define soap_GET___ns1__userRNCertGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__userRNCertGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__userRNCertGet
#define soap_POST_recv___ns1__userRNCertGet(soap, data) ( soap_read___ns1__userRNCertGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__userModify_DEFINED
#define SOAP_TYPE___ns1__userModify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__userModify(struct soap*, struct __ns1__userModify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__userModify(struct soap*, const struct __ns1__userModify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__userModify(struct soap*, const char*, int, const struct __ns1__userModify *, const char*);
SOAP_FMAC3 struct __ns1__userModify * SOAP_FMAC4 soap_in___ns1__userModify(struct soap*, const char*, struct __ns1__userModify *, const char*);

SOAP_FMAC3 struct __ns1__userModify * SOAP_FMAC4 soap_new___ns1__userModify(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__userModify(struct soap*, const struct __ns1__userModify *, const char*, const char*);

#ifndef soap_write___ns1__userModify
#define soap_write___ns1__userModify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__userModify(soap, data), 0) || soap_put___ns1__userModify(soap, data, "-ns1:userModify", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__userModify
#define soap_PUT___ns1__userModify(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userModify(soap, data), 0) || soap_put___ns1__userModify(soap, data, "-ns1:userModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__userModify
#define soap_PATCH___ns1__userModify(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userModify(soap, data), 0) || soap_put___ns1__userModify(soap, data, "-ns1:userModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__userModify
#define soap_POST_send___ns1__userModify(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userModify(soap, data), 0) || soap_put___ns1__userModify(soap, data, "-ns1:userModify", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__userModify * SOAP_FMAC4 soap_get___ns1__userModify(struct soap*, struct __ns1__userModify *, const char*, const char*);

#ifndef soap_read___ns1__userModify
#define soap_read___ns1__userModify(soap, data) ( ((data) ? (soap_default___ns1__userModify(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__userModify(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__userModify
#define soap_GET___ns1__userModify(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__userModify(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__userModify
#define soap_POST_recv___ns1__userModify(soap, data) ( soap_read___ns1__userModify(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__userVIDSet_DEFINED
#define SOAP_TYPE___ns1__userVIDSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__userVIDSet(struct soap*, struct __ns1__userVIDSet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__userVIDSet(struct soap*, const struct __ns1__userVIDSet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__userVIDSet(struct soap*, const char*, int, const struct __ns1__userVIDSet *, const char*);
SOAP_FMAC3 struct __ns1__userVIDSet * SOAP_FMAC4 soap_in___ns1__userVIDSet(struct soap*, const char*, struct __ns1__userVIDSet *, const char*);

SOAP_FMAC3 struct __ns1__userVIDSet * SOAP_FMAC4 soap_new___ns1__userVIDSet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__userVIDSet(struct soap*, const struct __ns1__userVIDSet *, const char*, const char*);

#ifndef soap_write___ns1__userVIDSet
#define soap_write___ns1__userVIDSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__userVIDSet(soap, data), 0) || soap_put___ns1__userVIDSet(soap, data, "-ns1:userVIDSet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__userVIDSet
#define soap_PUT___ns1__userVIDSet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userVIDSet(soap, data), 0) || soap_put___ns1__userVIDSet(soap, data, "-ns1:userVIDSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__userVIDSet
#define soap_PATCH___ns1__userVIDSet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userVIDSet(soap, data), 0) || soap_put___ns1__userVIDSet(soap, data, "-ns1:userVIDSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__userVIDSet
#define soap_POST_send___ns1__userVIDSet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__userVIDSet(soap, data), 0) || soap_put___ns1__userVIDSet(soap, data, "-ns1:userVIDSet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__userVIDSet * SOAP_FMAC4 soap_get___ns1__userVIDSet(struct soap*, struct __ns1__userVIDSet *, const char*, const char*);

#ifndef soap_read___ns1__userVIDSet
#define soap_read___ns1__userVIDSet(soap, data) ( ((data) ? (soap_default___ns1__userVIDSet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__userVIDSet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__userVIDSet
#define soap_GET___ns1__userVIDSet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__userVIDSet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__userVIDSet
#define soap_POST_recv___ns1__userVIDSet(soap, data) ( soap_read___ns1__userVIDSet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__challenge__DEFINED
#define SOAP_TYPE___ns1__challenge__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__challenge_(struct soap*, struct __ns1__challenge_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__challenge_(struct soap*, const struct __ns1__challenge_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__challenge_(struct soap*, const char*, int, const struct __ns1__challenge_ *, const char*);
SOAP_FMAC3 struct __ns1__challenge_ * SOAP_FMAC4 soap_in___ns1__challenge_(struct soap*, const char*, struct __ns1__challenge_ *, const char*);

SOAP_FMAC3 struct __ns1__challenge_ * SOAP_FMAC4 soap_new___ns1__challenge_(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__challenge_(struct soap*, const struct __ns1__challenge_ *, const char*, const char*);

#ifndef soap_write___ns1__challenge_
#define soap_write___ns1__challenge_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__challenge_(soap, data), 0) || soap_put___ns1__challenge_(soap, data, "-ns1:challenge", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__challenge_
#define soap_PUT___ns1__challenge_(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__challenge_(soap, data), 0) || soap_put___ns1__challenge_(soap, data, "-ns1:challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__challenge_
#define soap_PATCH___ns1__challenge_(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__challenge_(soap, data), 0) || soap_put___ns1__challenge_(soap, data, "-ns1:challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__challenge_
#define soap_POST_send___ns1__challenge_(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__challenge_(soap, data), 0) || soap_put___ns1__challenge_(soap, data, "-ns1:challenge", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__challenge_ * SOAP_FMAC4 soap_get___ns1__challenge_(struct soap*, struct __ns1__challenge_ *, const char*, const char*);

#ifndef soap_read___ns1__challenge_
#define soap_read___ns1__challenge_(soap, data) ( ((data) ? (soap_default___ns1__challenge_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__challenge_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__challenge_
#define soap_GET___ns1__challenge_(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__challenge_(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__challenge_
#define soap_POST_recv___ns1__challenge_(soap, data) ( soap_read___ns1__challenge_(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__getResult__DEFINED
#define SOAP_TYPE___ns1__getResult__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getResult_(struct soap*, struct __ns1__getResult_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getResult_(struct soap*, const struct __ns1__getResult_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getResult_(struct soap*, const char*, int, const struct __ns1__getResult_ *, const char*);
SOAP_FMAC3 struct __ns1__getResult_ * SOAP_FMAC4 soap_in___ns1__getResult_(struct soap*, const char*, struct __ns1__getResult_ *, const char*);

SOAP_FMAC3 struct __ns1__getResult_ * SOAP_FMAC4 soap_new___ns1__getResult_(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getResult_(struct soap*, const struct __ns1__getResult_ *, const char*, const char*);

#ifndef soap_write___ns1__getResult_
#define soap_write___ns1__getResult_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getResult_(soap, data), 0) || soap_put___ns1__getResult_(soap, data, "-ns1:getResult", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__getResult_
#define soap_PUT___ns1__getResult_(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult_(soap, data), 0) || soap_put___ns1__getResult_(soap, data, "-ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__getResult_
#define soap_PATCH___ns1__getResult_(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult_(soap, data), 0) || soap_put___ns1__getResult_(soap, data, "-ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__getResult_
#define soap_POST_send___ns1__getResult_(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult_(soap, data), 0) || soap_put___ns1__getResult_(soap, data, "-ns1:getResult", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getResult_ * SOAP_FMAC4 soap_get___ns1__getResult_(struct soap*, struct __ns1__getResult_ *, const char*, const char*);

#ifndef soap_read___ns1__getResult_
#define soap_read___ns1__getResult_(soap, data) ( ((data) ? (soap_default___ns1__getResult_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__getResult_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__getResult_
#define soap_GET___ns1__getResult_(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__getResult_(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__getResult_
#define soap_POST_recv___ns1__getResult_(soap, data) ( soap_read___ns1__getResult_(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__challenge_DEFINED
#define SOAP_TYPE___ns1__challenge_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__challenge(struct soap*, struct __ns1__challenge *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__challenge(struct soap*, const struct __ns1__challenge *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__challenge(struct soap*, const char*, int, const struct __ns1__challenge *, const char*);
SOAP_FMAC3 struct __ns1__challenge * SOAP_FMAC4 soap_in___ns1__challenge(struct soap*, const char*, struct __ns1__challenge *, const char*);

SOAP_FMAC3 struct __ns1__challenge * SOAP_FMAC4 soap_new___ns1__challenge(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__challenge(struct soap*, const struct __ns1__challenge *, const char*, const char*);

#ifndef soap_write___ns1__challenge
#define soap_write___ns1__challenge(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__challenge(soap, data), 0) || soap_put___ns1__challenge(soap, data, "-ns1:challenge", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__challenge
#define soap_PUT___ns1__challenge(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__challenge(soap, data), 0) || soap_put___ns1__challenge(soap, data, "-ns1:challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__challenge
#define soap_PATCH___ns1__challenge(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__challenge(soap, data), 0) || soap_put___ns1__challenge(soap, data, "-ns1:challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__challenge
#define soap_POST_send___ns1__challenge(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__challenge(soap, data), 0) || soap_put___ns1__challenge(soap, data, "-ns1:challenge", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__challenge * SOAP_FMAC4 soap_get___ns1__challenge(struct soap*, struct __ns1__challenge *, const char*, const char*);

#ifndef soap_read___ns1__challenge
#define soap_read___ns1__challenge(soap, data) ( ((data) ? (soap_default___ns1__challenge(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__challenge(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__challenge
#define soap_GET___ns1__challenge(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__challenge(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__challenge
#define soap_POST_recv___ns1__challenge(soap, data) ( soap_read___ns1__challenge(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__getPermissionById_DEFINED
#define SOAP_TYPE___ns1__getPermissionById_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getPermissionById(struct soap*, struct __ns1__getPermissionById *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getPermissionById(struct soap*, const struct __ns1__getPermissionById *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getPermissionById(struct soap*, const char*, int, const struct __ns1__getPermissionById *, const char*);
SOAP_FMAC3 struct __ns1__getPermissionById * SOAP_FMAC4 soap_in___ns1__getPermissionById(struct soap*, const char*, struct __ns1__getPermissionById *, const char*);

SOAP_FMAC3 struct __ns1__getPermissionById * SOAP_FMAC4 soap_new___ns1__getPermissionById(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getPermissionById(struct soap*, const struct __ns1__getPermissionById *, const char*, const char*);

#ifndef soap_write___ns1__getPermissionById
#define soap_write___ns1__getPermissionById(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getPermissionById(soap, data), 0) || soap_put___ns1__getPermissionById(soap, data, "-ns1:getPermissionById", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__getPermissionById
#define soap_PUT___ns1__getPermissionById(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPermissionById(soap, data), 0) || soap_put___ns1__getPermissionById(soap, data, "-ns1:getPermissionById", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__getPermissionById
#define soap_PATCH___ns1__getPermissionById(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPermissionById(soap, data), 0) || soap_put___ns1__getPermissionById(soap, data, "-ns1:getPermissionById", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__getPermissionById
#define soap_POST_send___ns1__getPermissionById(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getPermissionById(soap, data), 0) || soap_put___ns1__getPermissionById(soap, data, "-ns1:getPermissionById", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getPermissionById * SOAP_FMAC4 soap_get___ns1__getPermissionById(struct soap*, struct __ns1__getPermissionById *, const char*, const char*);

#ifndef soap_read___ns1__getPermissionById
#define soap_read___ns1__getPermissionById(soap, data) ( ((data) ? (soap_default___ns1__getPermissionById(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__getPermissionById(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__getPermissionById
#define soap_GET___ns1__getPermissionById(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__getPermissionById(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__getPermissionById
#define soap_POST_recv___ns1__getPermissionById(soap, data) ( soap_read___ns1__getPermissionById(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__random_DEFINED
#define SOAP_TYPE___ns1__random_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__random(struct soap*, struct __ns1__random *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__random(struct soap*, const struct __ns1__random *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__random(struct soap*, const char*, int, const struct __ns1__random *, const char*);
SOAP_FMAC3 struct __ns1__random * SOAP_FMAC4 soap_in___ns1__random(struct soap*, const char*, struct __ns1__random *, const char*);

SOAP_FMAC3 struct __ns1__random * SOAP_FMAC4 soap_new___ns1__random(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__random(struct soap*, const struct __ns1__random *, const char*, const char*);

#ifndef soap_write___ns1__random
#define soap_write___ns1__random(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__random(soap, data), 0) || soap_put___ns1__random(soap, data, "-ns1:random", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__random
#define soap_PUT___ns1__random(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__random(soap, data), 0) || soap_put___ns1__random(soap, data, "-ns1:random", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__random
#define soap_PATCH___ns1__random(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__random(soap, data), 0) || soap_put___ns1__random(soap, data, "-ns1:random", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__random
#define soap_POST_send___ns1__random(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__random(soap, data), 0) || soap_put___ns1__random(soap, data, "-ns1:random", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__random * SOAP_FMAC4 soap_get___ns1__random(struct soap*, struct __ns1__random *, const char*, const char*);

#ifndef soap_read___ns1__random
#define soap_read___ns1__random(soap, data) ( ((data) ? (soap_default___ns1__random(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__random(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__random
#define soap_GET___ns1__random(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__random(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__random
#define soap_POST_recv___ns1__random(soap, data) ( soap_read___ns1__random(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__getResult_DEFINED
#define SOAP_TYPE___ns1__getResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getResult(struct soap*, struct __ns1__getResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getResult(struct soap*, const struct __ns1__getResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getResult(struct soap*, const char*, int, const struct __ns1__getResult *, const char*);
SOAP_FMAC3 struct __ns1__getResult * SOAP_FMAC4 soap_in___ns1__getResult(struct soap*, const char*, struct __ns1__getResult *, const char*);

SOAP_FMAC3 struct __ns1__getResult * SOAP_FMAC4 soap_new___ns1__getResult(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getResult(struct soap*, const struct __ns1__getResult *, const char*, const char*);

#ifndef soap_write___ns1__getResult
#define soap_write___ns1__getResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__getResult(soap, data), 0) || soap_put___ns1__getResult(soap, data, "-ns1:getResult", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__getResult
#define soap_PUT___ns1__getResult(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult(soap, data), 0) || soap_put___ns1__getResult(soap, data, "-ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__getResult
#define soap_PATCH___ns1__getResult(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult(soap, data), 0) || soap_put___ns1__getResult(soap, data, "-ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__getResult
#define soap_POST_send___ns1__getResult(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getResult(soap, data), 0) || soap_put___ns1__getResult(soap, data, "-ns1:getResult", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__getResult * SOAP_FMAC4 soap_get___ns1__getResult(struct soap*, struct __ns1__getResult *, const char*, const char*);

#ifndef soap_read___ns1__getResult
#define soap_read___ns1__getResult(soap, data) ( ((data) ? (soap_default___ns1__getResult(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__getResult(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__getResult
#define soap_GET___ns1__getResult(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__getResult(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__getResult
#define soap_POST_recv___ns1__getResult(soap, data) ( soap_read___ns1__getResult(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE___ns1__authSecAssert_DEFINED
#define SOAP_TYPE___ns1__authSecAssert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__authSecAssert(struct soap*, struct __ns1__authSecAssert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__authSecAssert(struct soap*, const struct __ns1__authSecAssert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__authSecAssert(struct soap*, const char*, int, const struct __ns1__authSecAssert *, const char*);
SOAP_FMAC3 struct __ns1__authSecAssert * SOAP_FMAC4 soap_in___ns1__authSecAssert(struct soap*, const char*, struct __ns1__authSecAssert *, const char*);

SOAP_FMAC3 struct __ns1__authSecAssert * SOAP_FMAC4 soap_new___ns1__authSecAssert(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__authSecAssert(struct soap*, const struct __ns1__authSecAssert *, const char*, const char*);

#ifndef soap_write___ns1__authSecAssert
#define soap_write___ns1__authSecAssert(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__authSecAssert(soap, data), 0) || soap_put___ns1__authSecAssert(soap, data, "-ns1:authSecAssert", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT___ns1__authSecAssert
#define soap_PUT___ns1__authSecAssert(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__authSecAssert(soap, data), 0) || soap_put___ns1__authSecAssert(soap, data, "-ns1:authSecAssert", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH___ns1__authSecAssert
#define soap_PATCH___ns1__authSecAssert(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__authSecAssert(soap, data), 0) || soap_put___ns1__authSecAssert(soap, data, "-ns1:authSecAssert", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send___ns1__authSecAssert
#define soap_POST_send___ns1__authSecAssert(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__authSecAssert(soap, data), 0) || soap_put___ns1__authSecAssert(soap, data, "-ns1:authSecAssert", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__authSecAssert * SOAP_FMAC4 soap_get___ns1__authSecAssert(struct soap*, struct __ns1__authSecAssert *, const char*, const char*);

#ifndef soap_read___ns1__authSecAssert
#define soap_read___ns1__authSecAssert(soap, data) ( ((data) ? (soap_default___ns1__authSecAssert(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get___ns1__authSecAssert(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET___ns1__authSecAssert
#define soap_GET___ns1__authSecAssert(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read___ns1__authSecAssert(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv___ns1__authSecAssert
#define soap_POST_recv___ns1__authSecAssert(soap, data) ( soap_read___ns1__authSecAssert(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userListGetResponse_DEFINED
#define SOAP_TYPE_ns1__userListGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userListGetResponse(struct soap*, struct ns1__userListGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userListGetResponse(struct soap*, const struct ns1__userListGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userListGetResponse(struct soap*, const char*, int, const struct ns1__userListGetResponse *, const char*);
SOAP_FMAC3 struct ns1__userListGetResponse * SOAP_FMAC4 soap_in_ns1__userListGetResponse(struct soap*, const char*, struct ns1__userListGetResponse *, const char*);

SOAP_FMAC3 struct ns1__userListGetResponse * SOAP_FMAC4 soap_new_ns1__userListGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userListGetResponse(struct soap*, const struct ns1__userListGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__userListGetResponse
#define soap_write_ns1__userListGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userListGetResponse(soap, data), 0) || soap_put_ns1__userListGetResponse(soap, data, "ns1:userListGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userListGetResponse
#define soap_PUT_ns1__userListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userListGetResponse(soap, data), 0) || soap_put_ns1__userListGetResponse(soap, data, "ns1:userListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userListGetResponse
#define soap_PATCH_ns1__userListGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userListGetResponse(soap, data), 0) || soap_put_ns1__userListGetResponse(soap, data, "ns1:userListGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userListGetResponse
#define soap_POST_send_ns1__userListGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userListGetResponse(soap, data), 0) || soap_put_ns1__userListGetResponse(soap, data, "ns1:userListGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userListGetResponse * SOAP_FMAC4 soap_get_ns1__userListGetResponse(struct soap*, struct ns1__userListGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__userListGetResponse
#define soap_read_ns1__userListGetResponse(soap, data) ( ((data) ? (soap_default_ns1__userListGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userListGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userListGetResponse
#define soap_GET_ns1__userListGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userListGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userListGetResponse
#define soap_POST_recv_ns1__userListGetResponse(soap, data) ( soap_read_ns1__userListGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userListGet_DEFINED
#define SOAP_TYPE_ns1__userListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userListGet(struct soap*, struct ns1__userListGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userListGet(struct soap*, const struct ns1__userListGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userListGet(struct soap*, const char*, int, const struct ns1__userListGet *, const char*);
SOAP_FMAC3 struct ns1__userListGet * SOAP_FMAC4 soap_in_ns1__userListGet(struct soap*, const char*, struct ns1__userListGet *, const char*);

SOAP_FMAC3 struct ns1__userListGet * SOAP_FMAC4 soap_new_ns1__userListGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userListGet(struct soap*, const struct ns1__userListGet *, const char*, const char*);

#ifndef soap_write_ns1__userListGet
#define soap_write_ns1__userListGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userListGet(soap, data), 0) || soap_put_ns1__userListGet(soap, data, "ns1:userListGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userListGet
#define soap_PUT_ns1__userListGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userListGet(soap, data), 0) || soap_put_ns1__userListGet(soap, data, "ns1:userListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userListGet
#define soap_PATCH_ns1__userListGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userListGet(soap, data), 0) || soap_put_ns1__userListGet(soap, data, "ns1:userListGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userListGet
#define soap_POST_send_ns1__userListGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userListGet(soap, data), 0) || soap_put_ns1__userListGet(soap, data, "ns1:userListGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userListGet * SOAP_FMAC4 soap_get_ns1__userListGet(struct soap*, struct ns1__userListGet *, const char*, const char*);

#ifndef soap_read_ns1__userListGet
#define soap_read_ns1__userListGet(soap, data) ( ((data) ? (soap_default_ns1__userListGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userListGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userListGet
#define soap_GET_ns1__userListGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userListGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userListGet
#define soap_POST_recv_ns1__userListGet(soap, data) ( soap_read_ns1__userListGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userRNCertGetResponse_DEFINED
#define SOAP_TYPE_ns1__userRNCertGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userRNCertGetResponse(struct soap*, struct ns1__userRNCertGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userRNCertGetResponse(struct soap*, const struct ns1__userRNCertGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userRNCertGetResponse(struct soap*, const char*, int, const struct ns1__userRNCertGetResponse *, const char*);
SOAP_FMAC3 struct ns1__userRNCertGetResponse * SOAP_FMAC4 soap_in_ns1__userRNCertGetResponse(struct soap*, const char*, struct ns1__userRNCertGetResponse *, const char*);

SOAP_FMAC3 struct ns1__userRNCertGetResponse * SOAP_FMAC4 soap_new_ns1__userRNCertGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userRNCertGetResponse(struct soap*, const struct ns1__userRNCertGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__userRNCertGetResponse
#define soap_write_ns1__userRNCertGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userRNCertGetResponse(soap, data), 0) || soap_put_ns1__userRNCertGetResponse(soap, data, "ns1:userRNCertGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userRNCertGetResponse
#define soap_PUT_ns1__userRNCertGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userRNCertGetResponse(soap, data), 0) || soap_put_ns1__userRNCertGetResponse(soap, data, "ns1:userRNCertGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userRNCertGetResponse
#define soap_PATCH_ns1__userRNCertGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userRNCertGetResponse(soap, data), 0) || soap_put_ns1__userRNCertGetResponse(soap, data, "ns1:userRNCertGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userRNCertGetResponse
#define soap_POST_send_ns1__userRNCertGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userRNCertGetResponse(soap, data), 0) || soap_put_ns1__userRNCertGetResponse(soap, data, "ns1:userRNCertGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userRNCertGetResponse * SOAP_FMAC4 soap_get_ns1__userRNCertGetResponse(struct soap*, struct ns1__userRNCertGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__userRNCertGetResponse
#define soap_read_ns1__userRNCertGetResponse(soap, data) ( ((data) ? (soap_default_ns1__userRNCertGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userRNCertGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userRNCertGetResponse
#define soap_GET_ns1__userRNCertGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userRNCertGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userRNCertGetResponse
#define soap_POST_recv_ns1__userRNCertGetResponse(soap, data) ( soap_read_ns1__userRNCertGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userRNCertGet_DEFINED
#define SOAP_TYPE_ns1__userRNCertGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userRNCertGet(struct soap*, struct ns1__userRNCertGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userRNCertGet(struct soap*, const struct ns1__userRNCertGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userRNCertGet(struct soap*, const char*, int, const struct ns1__userRNCertGet *, const char*);
SOAP_FMAC3 struct ns1__userRNCertGet * SOAP_FMAC4 soap_in_ns1__userRNCertGet(struct soap*, const char*, struct ns1__userRNCertGet *, const char*);

SOAP_FMAC3 struct ns1__userRNCertGet * SOAP_FMAC4 soap_new_ns1__userRNCertGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userRNCertGet(struct soap*, const struct ns1__userRNCertGet *, const char*, const char*);

#ifndef soap_write_ns1__userRNCertGet
#define soap_write_ns1__userRNCertGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userRNCertGet(soap, data), 0) || soap_put_ns1__userRNCertGet(soap, data, "ns1:userRNCertGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userRNCertGet
#define soap_PUT_ns1__userRNCertGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userRNCertGet(soap, data), 0) || soap_put_ns1__userRNCertGet(soap, data, "ns1:userRNCertGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userRNCertGet
#define soap_PATCH_ns1__userRNCertGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userRNCertGet(soap, data), 0) || soap_put_ns1__userRNCertGet(soap, data, "ns1:userRNCertGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userRNCertGet
#define soap_POST_send_ns1__userRNCertGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userRNCertGet(soap, data), 0) || soap_put_ns1__userRNCertGet(soap, data, "ns1:userRNCertGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userRNCertGet * SOAP_FMAC4 soap_get_ns1__userRNCertGet(struct soap*, struct ns1__userRNCertGet *, const char*, const char*);

#ifndef soap_read_ns1__userRNCertGet
#define soap_read_ns1__userRNCertGet(soap, data) ( ((data) ? (soap_default_ns1__userRNCertGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userRNCertGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userRNCertGet
#define soap_GET_ns1__userRNCertGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userRNCertGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userRNCertGet
#define soap_POST_recv_ns1__userRNCertGet(soap, data) ( soap_read_ns1__userRNCertGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userDefineResponse_DEFINED
#define SOAP_TYPE_ns1__userDefineResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userDefineResponse(struct soap*, struct ns1__userDefineResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userDefineResponse(struct soap*, const struct ns1__userDefineResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userDefineResponse(struct soap*, const char*, int, const struct ns1__userDefineResponse *, const char*);
SOAP_FMAC3 struct ns1__userDefineResponse * SOAP_FMAC4 soap_in_ns1__userDefineResponse(struct soap*, const char*, struct ns1__userDefineResponse *, const char*);

SOAP_FMAC3 struct ns1__userDefineResponse * SOAP_FMAC4 soap_new_ns1__userDefineResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userDefineResponse(struct soap*, const struct ns1__userDefineResponse *, const char*, const char*);

#ifndef soap_write_ns1__userDefineResponse
#define soap_write_ns1__userDefineResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userDefineResponse(soap, data), 0) || soap_put_ns1__userDefineResponse(soap, data, "ns1:userDefineResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userDefineResponse
#define soap_PUT_ns1__userDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userDefineResponse(soap, data), 0) || soap_put_ns1__userDefineResponse(soap, data, "ns1:userDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userDefineResponse
#define soap_PATCH_ns1__userDefineResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userDefineResponse(soap, data), 0) || soap_put_ns1__userDefineResponse(soap, data, "ns1:userDefineResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userDefineResponse
#define soap_POST_send_ns1__userDefineResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userDefineResponse(soap, data), 0) || soap_put_ns1__userDefineResponse(soap, data, "ns1:userDefineResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userDefineResponse * SOAP_FMAC4 soap_get_ns1__userDefineResponse(struct soap*, struct ns1__userDefineResponse *, const char*, const char*);

#ifndef soap_read_ns1__userDefineResponse
#define soap_read_ns1__userDefineResponse(soap, data) ( ((data) ? (soap_default_ns1__userDefineResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userDefineResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userDefineResponse
#define soap_GET_ns1__userDefineResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userDefineResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userDefineResponse
#define soap_POST_recv_ns1__userDefineResponse(soap, data) ( soap_read_ns1__userDefineResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userDefine_DEFINED
#define SOAP_TYPE_ns1__userDefine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userDefine(struct soap*, struct ns1__userDefine *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userDefine(struct soap*, const struct ns1__userDefine *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userDefine(struct soap*, const char*, int, const struct ns1__userDefine *, const char*);
SOAP_FMAC3 struct ns1__userDefine * SOAP_FMAC4 soap_in_ns1__userDefine(struct soap*, const char*, struct ns1__userDefine *, const char*);

SOAP_FMAC3 struct ns1__userDefine * SOAP_FMAC4 soap_new_ns1__userDefine(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userDefine(struct soap*, const struct ns1__userDefine *, const char*, const char*);

#ifndef soap_write_ns1__userDefine
#define soap_write_ns1__userDefine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userDefine(soap, data), 0) || soap_put_ns1__userDefine(soap, data, "ns1:userDefine", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userDefine
#define soap_PUT_ns1__userDefine(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userDefine(soap, data), 0) || soap_put_ns1__userDefine(soap, data, "ns1:userDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userDefine
#define soap_PATCH_ns1__userDefine(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userDefine(soap, data), 0) || soap_put_ns1__userDefine(soap, data, "ns1:userDefine", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userDefine
#define soap_POST_send_ns1__userDefine(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userDefine(soap, data), 0) || soap_put_ns1__userDefine(soap, data, "ns1:userDefine", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userDefine * SOAP_FMAC4 soap_get_ns1__userDefine(struct soap*, struct ns1__userDefine *, const char*, const char*);

#ifndef soap_read_ns1__userDefine
#define soap_read_ns1__userDefine(soap, data) ( ((data) ? (soap_default_ns1__userDefine(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userDefine(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userDefine
#define soap_GET_ns1__userDefine(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userDefine(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userDefine
#define soap_POST_recv_ns1__userDefine(soap, data) ( soap_read_ns1__userDefine(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__accessUnitGetResponse_DEFINED
#define SOAP_TYPE_ns1__accessUnitGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__accessUnitGetResponse(struct soap*, struct ns1__accessUnitGetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__accessUnitGetResponse(struct soap*, const struct ns1__accessUnitGetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__accessUnitGetResponse(struct soap*, const char*, int, const struct ns1__accessUnitGetResponse *, const char*);
SOAP_FMAC3 struct ns1__accessUnitGetResponse * SOAP_FMAC4 soap_in_ns1__accessUnitGetResponse(struct soap*, const char*, struct ns1__accessUnitGetResponse *, const char*);

SOAP_FMAC3 struct ns1__accessUnitGetResponse * SOAP_FMAC4 soap_new_ns1__accessUnitGetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__accessUnitGetResponse(struct soap*, const struct ns1__accessUnitGetResponse *, const char*, const char*);

#ifndef soap_write_ns1__accessUnitGetResponse
#define soap_write_ns1__accessUnitGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__accessUnitGetResponse(soap, data), 0) || soap_put_ns1__accessUnitGetResponse(soap, data, "ns1:accessUnitGetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__accessUnitGetResponse
#define soap_PUT_ns1__accessUnitGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__accessUnitGetResponse(soap, data), 0) || soap_put_ns1__accessUnitGetResponse(soap, data, "ns1:accessUnitGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__accessUnitGetResponse
#define soap_PATCH_ns1__accessUnitGetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__accessUnitGetResponse(soap, data), 0) || soap_put_ns1__accessUnitGetResponse(soap, data, "ns1:accessUnitGetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__accessUnitGetResponse
#define soap_POST_send_ns1__accessUnitGetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__accessUnitGetResponse(soap, data), 0) || soap_put_ns1__accessUnitGetResponse(soap, data, "ns1:accessUnitGetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__accessUnitGetResponse * SOAP_FMAC4 soap_get_ns1__accessUnitGetResponse(struct soap*, struct ns1__accessUnitGetResponse *, const char*, const char*);

#ifndef soap_read_ns1__accessUnitGetResponse
#define soap_read_ns1__accessUnitGetResponse(soap, data) ( ((data) ? (soap_default_ns1__accessUnitGetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__accessUnitGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__accessUnitGetResponse
#define soap_GET_ns1__accessUnitGetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__accessUnitGetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__accessUnitGetResponse
#define soap_POST_recv_ns1__accessUnitGetResponse(soap, data) ( soap_read_ns1__accessUnitGetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__accessUnitGet_DEFINED
#define SOAP_TYPE_ns1__accessUnitGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__accessUnitGet(struct soap*, struct ns1__accessUnitGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__accessUnitGet(struct soap*, const struct ns1__accessUnitGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__accessUnitGet(struct soap*, const char*, int, const struct ns1__accessUnitGet *, const char*);
SOAP_FMAC3 struct ns1__accessUnitGet * SOAP_FMAC4 soap_in_ns1__accessUnitGet(struct soap*, const char*, struct ns1__accessUnitGet *, const char*);

SOAP_FMAC3 struct ns1__accessUnitGet * SOAP_FMAC4 soap_new_ns1__accessUnitGet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__accessUnitGet(struct soap*, const struct ns1__accessUnitGet *, const char*, const char*);

#ifndef soap_write_ns1__accessUnitGet
#define soap_write_ns1__accessUnitGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__accessUnitGet(soap, data), 0) || soap_put_ns1__accessUnitGet(soap, data, "ns1:accessUnitGet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__accessUnitGet
#define soap_PUT_ns1__accessUnitGet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__accessUnitGet(soap, data), 0) || soap_put_ns1__accessUnitGet(soap, data, "ns1:accessUnitGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__accessUnitGet
#define soap_PATCH_ns1__accessUnitGet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__accessUnitGet(soap, data), 0) || soap_put_ns1__accessUnitGet(soap, data, "ns1:accessUnitGet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__accessUnitGet
#define soap_POST_send_ns1__accessUnitGet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__accessUnitGet(soap, data), 0) || soap_put_ns1__accessUnitGet(soap, data, "ns1:accessUnitGet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__accessUnitGet * SOAP_FMAC4 soap_get_ns1__accessUnitGet(struct soap*, struct ns1__accessUnitGet *, const char*, const char*);

#ifndef soap_read_ns1__accessUnitGet
#define soap_read_ns1__accessUnitGet(soap, data) ( ((data) ? (soap_default_ns1__accessUnitGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__accessUnitGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__accessUnitGet
#define soap_GET_ns1__accessUnitGet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__accessUnitGet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__accessUnitGet
#define soap_POST_recv_ns1__accessUnitGet(soap, data) ( soap_read_ns1__accessUnitGet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userCancelResponse_DEFINED
#define SOAP_TYPE_ns1__userCancelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userCancelResponse(struct soap*, struct ns1__userCancelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userCancelResponse(struct soap*, const struct ns1__userCancelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userCancelResponse(struct soap*, const char*, int, const struct ns1__userCancelResponse *, const char*);
SOAP_FMAC3 struct ns1__userCancelResponse * SOAP_FMAC4 soap_in_ns1__userCancelResponse(struct soap*, const char*, struct ns1__userCancelResponse *, const char*);

SOAP_FMAC3 struct ns1__userCancelResponse * SOAP_FMAC4 soap_new_ns1__userCancelResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userCancelResponse(struct soap*, const struct ns1__userCancelResponse *, const char*, const char*);

#ifndef soap_write_ns1__userCancelResponse
#define soap_write_ns1__userCancelResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userCancelResponse(soap, data), 0) || soap_put_ns1__userCancelResponse(soap, data, "ns1:userCancelResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userCancelResponse
#define soap_PUT_ns1__userCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userCancelResponse(soap, data), 0) || soap_put_ns1__userCancelResponse(soap, data, "ns1:userCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userCancelResponse
#define soap_PATCH_ns1__userCancelResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userCancelResponse(soap, data), 0) || soap_put_ns1__userCancelResponse(soap, data, "ns1:userCancelResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userCancelResponse
#define soap_POST_send_ns1__userCancelResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userCancelResponse(soap, data), 0) || soap_put_ns1__userCancelResponse(soap, data, "ns1:userCancelResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userCancelResponse * SOAP_FMAC4 soap_get_ns1__userCancelResponse(struct soap*, struct ns1__userCancelResponse *, const char*, const char*);

#ifndef soap_read_ns1__userCancelResponse
#define soap_read_ns1__userCancelResponse(soap, data) ( ((data) ? (soap_default_ns1__userCancelResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userCancelResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userCancelResponse
#define soap_GET_ns1__userCancelResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userCancelResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userCancelResponse
#define soap_POST_recv_ns1__userCancelResponse(soap, data) ( soap_read_ns1__userCancelResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userCancel_DEFINED
#define SOAP_TYPE_ns1__userCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userCancel(struct soap*, struct ns1__userCancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userCancel(struct soap*, const struct ns1__userCancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userCancel(struct soap*, const char*, int, const struct ns1__userCancel *, const char*);
SOAP_FMAC3 struct ns1__userCancel * SOAP_FMAC4 soap_in_ns1__userCancel(struct soap*, const char*, struct ns1__userCancel *, const char*);

SOAP_FMAC3 struct ns1__userCancel * SOAP_FMAC4 soap_new_ns1__userCancel(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userCancel(struct soap*, const struct ns1__userCancel *, const char*, const char*);

#ifndef soap_write_ns1__userCancel
#define soap_write_ns1__userCancel(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userCancel(soap, data), 0) || soap_put_ns1__userCancel(soap, data, "ns1:userCancel", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userCancel
#define soap_PUT_ns1__userCancel(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userCancel(soap, data), 0) || soap_put_ns1__userCancel(soap, data, "ns1:userCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userCancel
#define soap_PATCH_ns1__userCancel(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userCancel(soap, data), 0) || soap_put_ns1__userCancel(soap, data, "ns1:userCancel", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userCancel
#define soap_POST_send_ns1__userCancel(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userCancel(soap, data), 0) || soap_put_ns1__userCancel(soap, data, "ns1:userCancel", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userCancel * SOAP_FMAC4 soap_get_ns1__userCancel(struct soap*, struct ns1__userCancel *, const char*, const char*);

#ifndef soap_read_ns1__userCancel
#define soap_read_ns1__userCancel(soap, data) ( ((data) ? (soap_default_ns1__userCancel(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userCancel(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userCancel
#define soap_GET_ns1__userCancel(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userCancel(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userCancel
#define soap_POST_recv_ns1__userCancel(soap, data) ( soap_read_ns1__userCancel(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__verifyUserRNResponse_DEFINED
#define SOAP_TYPE_ns1__verifyUserRNResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__verifyUserRNResponse(struct soap*, struct ns1__verifyUserRNResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__verifyUserRNResponse(struct soap*, const struct ns1__verifyUserRNResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__verifyUserRNResponse(struct soap*, const char*, int, const struct ns1__verifyUserRNResponse *, const char*);
SOAP_FMAC3 struct ns1__verifyUserRNResponse * SOAP_FMAC4 soap_in_ns1__verifyUserRNResponse(struct soap*, const char*, struct ns1__verifyUserRNResponse *, const char*);

SOAP_FMAC3 struct ns1__verifyUserRNResponse * SOAP_FMAC4 soap_new_ns1__verifyUserRNResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__verifyUserRNResponse(struct soap*, const struct ns1__verifyUserRNResponse *, const char*, const char*);

#ifndef soap_write_ns1__verifyUserRNResponse
#define soap_write_ns1__verifyUserRNResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__verifyUserRNResponse(soap, data), 0) || soap_put_ns1__verifyUserRNResponse(soap, data, "ns1:verifyUserRNResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__verifyUserRNResponse
#define soap_PUT_ns1__verifyUserRNResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__verifyUserRNResponse(soap, data), 0) || soap_put_ns1__verifyUserRNResponse(soap, data, "ns1:verifyUserRNResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__verifyUserRNResponse
#define soap_PATCH_ns1__verifyUserRNResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__verifyUserRNResponse(soap, data), 0) || soap_put_ns1__verifyUserRNResponse(soap, data, "ns1:verifyUserRNResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__verifyUserRNResponse
#define soap_POST_send_ns1__verifyUserRNResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__verifyUserRNResponse(soap, data), 0) || soap_put_ns1__verifyUserRNResponse(soap, data, "ns1:verifyUserRNResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__verifyUserRNResponse * SOAP_FMAC4 soap_get_ns1__verifyUserRNResponse(struct soap*, struct ns1__verifyUserRNResponse *, const char*, const char*);

#ifndef soap_read_ns1__verifyUserRNResponse
#define soap_read_ns1__verifyUserRNResponse(soap, data) ( ((data) ? (soap_default_ns1__verifyUserRNResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__verifyUserRNResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__verifyUserRNResponse
#define soap_GET_ns1__verifyUserRNResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__verifyUserRNResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__verifyUserRNResponse
#define soap_POST_recv_ns1__verifyUserRNResponse(soap, data) ( soap_read_ns1__verifyUserRNResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__verifyUserRN_DEFINED
#define SOAP_TYPE_ns1__verifyUserRN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__verifyUserRN(struct soap*, struct ns1__verifyUserRN *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__verifyUserRN(struct soap*, const struct ns1__verifyUserRN *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__verifyUserRN(struct soap*, const char*, int, const struct ns1__verifyUserRN *, const char*);
SOAP_FMAC3 struct ns1__verifyUserRN * SOAP_FMAC4 soap_in_ns1__verifyUserRN(struct soap*, const char*, struct ns1__verifyUserRN *, const char*);

SOAP_FMAC3 struct ns1__verifyUserRN * SOAP_FMAC4 soap_new_ns1__verifyUserRN(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__verifyUserRN(struct soap*, const struct ns1__verifyUserRN *, const char*, const char*);

#ifndef soap_write_ns1__verifyUserRN
#define soap_write_ns1__verifyUserRN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__verifyUserRN(soap, data), 0) || soap_put_ns1__verifyUserRN(soap, data, "ns1:verifyUserRN", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__verifyUserRN
#define soap_PUT_ns1__verifyUserRN(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__verifyUserRN(soap, data), 0) || soap_put_ns1__verifyUserRN(soap, data, "ns1:verifyUserRN", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__verifyUserRN
#define soap_PATCH_ns1__verifyUserRN(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__verifyUserRN(soap, data), 0) || soap_put_ns1__verifyUserRN(soap, data, "ns1:verifyUserRN", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__verifyUserRN
#define soap_POST_send_ns1__verifyUserRN(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__verifyUserRN(soap, data), 0) || soap_put_ns1__verifyUserRN(soap, data, "ns1:verifyUserRN", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__verifyUserRN * SOAP_FMAC4 soap_get_ns1__verifyUserRN(struct soap*, struct ns1__verifyUserRN *, const char*, const char*);

#ifndef soap_read_ns1__verifyUserRN
#define soap_read_ns1__verifyUserRN(soap, data) ( ((data) ? (soap_default_ns1__verifyUserRN(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__verifyUserRN(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__verifyUserRN
#define soap_GET_ns1__verifyUserRN(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__verifyUserRN(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__verifyUserRN
#define soap_POST_recv_ns1__verifyUserRN(soap, data) ( soap_read_ns1__verifyUserRN(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userVIDSetResponse_DEFINED
#define SOAP_TYPE_ns1__userVIDSetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userVIDSetResponse(struct soap*, struct ns1__userVIDSetResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userVIDSetResponse(struct soap*, const struct ns1__userVIDSetResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userVIDSetResponse(struct soap*, const char*, int, const struct ns1__userVIDSetResponse *, const char*);
SOAP_FMAC3 struct ns1__userVIDSetResponse * SOAP_FMAC4 soap_in_ns1__userVIDSetResponse(struct soap*, const char*, struct ns1__userVIDSetResponse *, const char*);

SOAP_FMAC3 struct ns1__userVIDSetResponse * SOAP_FMAC4 soap_new_ns1__userVIDSetResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userVIDSetResponse(struct soap*, const struct ns1__userVIDSetResponse *, const char*, const char*);

#ifndef soap_write_ns1__userVIDSetResponse
#define soap_write_ns1__userVIDSetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userVIDSetResponse(soap, data), 0) || soap_put_ns1__userVIDSetResponse(soap, data, "ns1:userVIDSetResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userVIDSetResponse
#define soap_PUT_ns1__userVIDSetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userVIDSetResponse(soap, data), 0) || soap_put_ns1__userVIDSetResponse(soap, data, "ns1:userVIDSetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userVIDSetResponse
#define soap_PATCH_ns1__userVIDSetResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userVIDSetResponse(soap, data), 0) || soap_put_ns1__userVIDSetResponse(soap, data, "ns1:userVIDSetResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userVIDSetResponse
#define soap_POST_send_ns1__userVIDSetResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userVIDSetResponse(soap, data), 0) || soap_put_ns1__userVIDSetResponse(soap, data, "ns1:userVIDSetResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userVIDSetResponse * SOAP_FMAC4 soap_get_ns1__userVIDSetResponse(struct soap*, struct ns1__userVIDSetResponse *, const char*, const char*);

#ifndef soap_read_ns1__userVIDSetResponse
#define soap_read_ns1__userVIDSetResponse(soap, data) ( ((data) ? (soap_default_ns1__userVIDSetResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userVIDSetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userVIDSetResponse
#define soap_GET_ns1__userVIDSetResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userVIDSetResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userVIDSetResponse
#define soap_POST_recv_ns1__userVIDSetResponse(soap, data) ( soap_read_ns1__userVIDSetResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userVIDSet_DEFINED
#define SOAP_TYPE_ns1__userVIDSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userVIDSet(struct soap*, struct ns1__userVIDSet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userVIDSet(struct soap*, const struct ns1__userVIDSet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userVIDSet(struct soap*, const char*, int, const struct ns1__userVIDSet *, const char*);
SOAP_FMAC3 struct ns1__userVIDSet * SOAP_FMAC4 soap_in_ns1__userVIDSet(struct soap*, const char*, struct ns1__userVIDSet *, const char*);

SOAP_FMAC3 struct ns1__userVIDSet * SOAP_FMAC4 soap_new_ns1__userVIDSet(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userVIDSet(struct soap*, const struct ns1__userVIDSet *, const char*, const char*);

#ifndef soap_write_ns1__userVIDSet
#define soap_write_ns1__userVIDSet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userVIDSet(soap, data), 0) || soap_put_ns1__userVIDSet(soap, data, "ns1:userVIDSet", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userVIDSet
#define soap_PUT_ns1__userVIDSet(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userVIDSet(soap, data), 0) || soap_put_ns1__userVIDSet(soap, data, "ns1:userVIDSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userVIDSet
#define soap_PATCH_ns1__userVIDSet(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userVIDSet(soap, data), 0) || soap_put_ns1__userVIDSet(soap, data, "ns1:userVIDSet", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userVIDSet
#define soap_POST_send_ns1__userVIDSet(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userVIDSet(soap, data), 0) || soap_put_ns1__userVIDSet(soap, data, "ns1:userVIDSet", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userVIDSet * SOAP_FMAC4 soap_get_ns1__userVIDSet(struct soap*, struct ns1__userVIDSet *, const char*, const char*);

#ifndef soap_read_ns1__userVIDSet
#define soap_read_ns1__userVIDSet(soap, data) ( ((data) ? (soap_default_ns1__userVIDSet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userVIDSet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userVIDSet
#define soap_GET_ns1__userVIDSet(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userVIDSet(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userVIDSet
#define soap_POST_recv_ns1__userVIDSet(soap, data) ( soap_read_ns1__userVIDSet(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userModifyResponse_DEFINED
#define SOAP_TYPE_ns1__userModifyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userModifyResponse(struct soap*, struct ns1__userModifyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userModifyResponse(struct soap*, const struct ns1__userModifyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userModifyResponse(struct soap*, const char*, int, const struct ns1__userModifyResponse *, const char*);
SOAP_FMAC3 struct ns1__userModifyResponse * SOAP_FMAC4 soap_in_ns1__userModifyResponse(struct soap*, const char*, struct ns1__userModifyResponse *, const char*);

SOAP_FMAC3 struct ns1__userModifyResponse * SOAP_FMAC4 soap_new_ns1__userModifyResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userModifyResponse(struct soap*, const struct ns1__userModifyResponse *, const char*, const char*);

#ifndef soap_write_ns1__userModifyResponse
#define soap_write_ns1__userModifyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userModifyResponse(soap, data), 0) || soap_put_ns1__userModifyResponse(soap, data, "ns1:userModifyResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userModifyResponse
#define soap_PUT_ns1__userModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userModifyResponse(soap, data), 0) || soap_put_ns1__userModifyResponse(soap, data, "ns1:userModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userModifyResponse
#define soap_PATCH_ns1__userModifyResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userModifyResponse(soap, data), 0) || soap_put_ns1__userModifyResponse(soap, data, "ns1:userModifyResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userModifyResponse
#define soap_POST_send_ns1__userModifyResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userModifyResponse(soap, data), 0) || soap_put_ns1__userModifyResponse(soap, data, "ns1:userModifyResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userModifyResponse * SOAP_FMAC4 soap_get_ns1__userModifyResponse(struct soap*, struct ns1__userModifyResponse *, const char*, const char*);

#ifndef soap_read_ns1__userModifyResponse
#define soap_read_ns1__userModifyResponse(soap, data) ( ((data) ? (soap_default_ns1__userModifyResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userModifyResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userModifyResponse
#define soap_GET_ns1__userModifyResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userModifyResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userModifyResponse
#define soap_POST_recv_ns1__userModifyResponse(soap, data) ( soap_read_ns1__userModifyResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__userModify_DEFINED
#define SOAP_TYPE_ns1__userModify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__userModify(struct soap*, struct ns1__userModify *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__userModify(struct soap*, const struct ns1__userModify *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__userModify(struct soap*, const char*, int, const struct ns1__userModify *, const char*);
SOAP_FMAC3 struct ns1__userModify * SOAP_FMAC4 soap_in_ns1__userModify(struct soap*, const char*, struct ns1__userModify *, const char*);

SOAP_FMAC3 struct ns1__userModify * SOAP_FMAC4 soap_new_ns1__userModify(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__userModify(struct soap*, const struct ns1__userModify *, const char*, const char*);

#ifndef soap_write_ns1__userModify
#define soap_write_ns1__userModify(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__userModify(soap, data), 0) || soap_put_ns1__userModify(soap, data, "ns1:userModify", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__userModify
#define soap_PUT_ns1__userModify(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userModify(soap, data), 0) || soap_put_ns1__userModify(soap, data, "ns1:userModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__userModify
#define soap_PATCH_ns1__userModify(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userModify(soap, data), 0) || soap_put_ns1__userModify(soap, data, "ns1:userModify", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__userModify
#define soap_POST_send_ns1__userModify(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__userModify(soap, data), 0) || soap_put_ns1__userModify(soap, data, "ns1:userModify", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__userModify * SOAP_FMAC4 soap_get_ns1__userModify(struct soap*, struct ns1__userModify *, const char*, const char*);

#ifndef soap_read_ns1__userModify
#define soap_read_ns1__userModify(soap, data) ( ((data) ? (soap_default_ns1__userModify(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__userModify(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__userModify
#define soap_GET_ns1__userModify(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__userModify(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__userModify
#define soap_POST_recv_ns1__userModify(soap, data) ( soap_read_ns1__userModify(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__challengeResponse_DEFINED
#define SOAP_TYPE_ns1__challengeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__challengeResponse(struct soap*, struct ns1__challengeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__challengeResponse(struct soap*, const struct ns1__challengeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__challengeResponse(struct soap*, const char*, int, const struct ns1__challengeResponse *, const char*);
SOAP_FMAC3 struct ns1__challengeResponse * SOAP_FMAC4 soap_in_ns1__challengeResponse(struct soap*, const char*, struct ns1__challengeResponse *, const char*);

SOAP_FMAC3 struct ns1__challengeResponse * SOAP_FMAC4 soap_new_ns1__challengeResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__challengeResponse(struct soap*, const struct ns1__challengeResponse *, const char*, const char*);

#ifndef soap_write_ns1__challengeResponse
#define soap_write_ns1__challengeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__challengeResponse(soap, data), 0) || soap_put_ns1__challengeResponse(soap, data, "ns1:challengeResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__challengeResponse
#define soap_PUT_ns1__challengeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__challengeResponse(soap, data), 0) || soap_put_ns1__challengeResponse(soap, data, "ns1:challengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__challengeResponse
#define soap_PATCH_ns1__challengeResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__challengeResponse(soap, data), 0) || soap_put_ns1__challengeResponse(soap, data, "ns1:challengeResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__challengeResponse
#define soap_POST_send_ns1__challengeResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__challengeResponse(soap, data), 0) || soap_put_ns1__challengeResponse(soap, data, "ns1:challengeResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__challengeResponse * SOAP_FMAC4 soap_get_ns1__challengeResponse(struct soap*, struct ns1__challengeResponse *, const char*, const char*);

#ifndef soap_read_ns1__challengeResponse
#define soap_read_ns1__challengeResponse(soap, data) ( ((data) ? (soap_default_ns1__challengeResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__challengeResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__challengeResponse
#define soap_GET_ns1__challengeResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__challengeResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__challengeResponse
#define soap_POST_recv_ns1__challengeResponse(soap, data) ( soap_read_ns1__challengeResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__challenge_DEFINED
#define SOAP_TYPE_ns1__challenge_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__challenge(struct soap*, struct ns1__challenge *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__challenge(struct soap*, const struct ns1__challenge *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__challenge(struct soap*, const char*, int, const struct ns1__challenge *, const char*);
SOAP_FMAC3 struct ns1__challenge * SOAP_FMAC4 soap_in_ns1__challenge(struct soap*, const char*, struct ns1__challenge *, const char*);

SOAP_FMAC3 struct ns1__challenge * SOAP_FMAC4 soap_new_ns1__challenge(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__challenge(struct soap*, const struct ns1__challenge *, const char*, const char*);

#ifndef soap_write_ns1__challenge
#define soap_write_ns1__challenge(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__challenge(soap, data), 0) || soap_put_ns1__challenge(soap, data, "ns1:challenge", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__challenge
#define soap_PUT_ns1__challenge(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__challenge(soap, data), 0) || soap_put_ns1__challenge(soap, data, "ns1:challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__challenge
#define soap_PATCH_ns1__challenge(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__challenge(soap, data), 0) || soap_put_ns1__challenge(soap, data, "ns1:challenge", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__challenge
#define soap_POST_send_ns1__challenge(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__challenge(soap, data), 0) || soap_put_ns1__challenge(soap, data, "ns1:challenge", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__challenge * SOAP_FMAC4 soap_get_ns1__challenge(struct soap*, struct ns1__challenge *, const char*, const char*);

#ifndef soap_read_ns1__challenge
#define soap_read_ns1__challenge(soap, data) ( ((data) ? (soap_default_ns1__challenge(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__challenge(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__challenge
#define soap_GET_ns1__challenge(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__challenge(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__challenge
#define soap_POST_recv_ns1__challenge(soap, data) ( soap_read_ns1__challenge(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getPermissionByIdResponse_DEFINED
#define SOAP_TYPE_ns1__getPermissionByIdResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPermissionByIdResponse(struct soap*, struct ns1__getPermissionByIdResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPermissionByIdResponse(struct soap*, const struct ns1__getPermissionByIdResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPermissionByIdResponse(struct soap*, const char*, int, const struct ns1__getPermissionByIdResponse *, const char*);
SOAP_FMAC3 struct ns1__getPermissionByIdResponse * SOAP_FMAC4 soap_in_ns1__getPermissionByIdResponse(struct soap*, const char*, struct ns1__getPermissionByIdResponse *, const char*);

SOAP_FMAC3 struct ns1__getPermissionByIdResponse * SOAP_FMAC4 soap_new_ns1__getPermissionByIdResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPermissionByIdResponse(struct soap*, const struct ns1__getPermissionByIdResponse *, const char*, const char*);

#ifndef soap_write_ns1__getPermissionByIdResponse
#define soap_write_ns1__getPermissionByIdResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getPermissionByIdResponse(soap, data), 0) || soap_put_ns1__getPermissionByIdResponse(soap, data, "ns1:getPermissionByIdResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getPermissionByIdResponse
#define soap_PUT_ns1__getPermissionByIdResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPermissionByIdResponse(soap, data), 0) || soap_put_ns1__getPermissionByIdResponse(soap, data, "ns1:getPermissionByIdResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__getPermissionByIdResponse
#define soap_PATCH_ns1__getPermissionByIdResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPermissionByIdResponse(soap, data), 0) || soap_put_ns1__getPermissionByIdResponse(soap, data, "ns1:getPermissionByIdResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__getPermissionByIdResponse
#define soap_POST_send_ns1__getPermissionByIdResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPermissionByIdResponse(soap, data), 0) || soap_put_ns1__getPermissionByIdResponse(soap, data, "ns1:getPermissionByIdResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getPermissionByIdResponse * SOAP_FMAC4 soap_get_ns1__getPermissionByIdResponse(struct soap*, struct ns1__getPermissionByIdResponse *, const char*, const char*);

#ifndef soap_read_ns1__getPermissionByIdResponse
#define soap_read_ns1__getPermissionByIdResponse(soap, data) ( ((data) ? (soap_default_ns1__getPermissionByIdResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getPermissionByIdResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getPermissionByIdResponse
#define soap_GET_ns1__getPermissionByIdResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getPermissionByIdResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__getPermissionByIdResponse
#define soap_POST_recv_ns1__getPermissionByIdResponse(soap, data) ( soap_read_ns1__getPermissionByIdResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getPermissionById_DEFINED
#define SOAP_TYPE_ns1__getPermissionById_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPermissionById(struct soap*, struct ns1__getPermissionById *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPermissionById(struct soap*, const struct ns1__getPermissionById *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPermissionById(struct soap*, const char*, int, const struct ns1__getPermissionById *, const char*);
SOAP_FMAC3 struct ns1__getPermissionById * SOAP_FMAC4 soap_in_ns1__getPermissionById(struct soap*, const char*, struct ns1__getPermissionById *, const char*);

SOAP_FMAC3 struct ns1__getPermissionById * SOAP_FMAC4 soap_new_ns1__getPermissionById(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPermissionById(struct soap*, const struct ns1__getPermissionById *, const char*, const char*);

#ifndef soap_write_ns1__getPermissionById
#define soap_write_ns1__getPermissionById(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getPermissionById(soap, data), 0) || soap_put_ns1__getPermissionById(soap, data, "ns1:getPermissionById", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getPermissionById
#define soap_PUT_ns1__getPermissionById(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPermissionById(soap, data), 0) || soap_put_ns1__getPermissionById(soap, data, "ns1:getPermissionById", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__getPermissionById
#define soap_PATCH_ns1__getPermissionById(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPermissionById(soap, data), 0) || soap_put_ns1__getPermissionById(soap, data, "ns1:getPermissionById", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__getPermissionById
#define soap_POST_send_ns1__getPermissionById(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPermissionById(soap, data), 0) || soap_put_ns1__getPermissionById(soap, data, "ns1:getPermissionById", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getPermissionById * SOAP_FMAC4 soap_get_ns1__getPermissionById(struct soap*, struct ns1__getPermissionById *, const char*, const char*);

#ifndef soap_read_ns1__getPermissionById
#define soap_read_ns1__getPermissionById(soap, data) ( ((data) ? (soap_default_ns1__getPermissionById(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getPermissionById(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getPermissionById
#define soap_GET_ns1__getPermissionById(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getPermissionById(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__getPermissionById
#define soap_POST_recv_ns1__getPermissionById(soap, data) ( soap_read_ns1__getPermissionById(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getResultResponse_DEFINED
#define SOAP_TYPE_ns1__getResultResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getResultResponse(struct soap*, struct ns1__getResultResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getResultResponse(struct soap*, const struct ns1__getResultResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getResultResponse(struct soap*, const char*, int, const struct ns1__getResultResponse *, const char*);
SOAP_FMAC3 struct ns1__getResultResponse * SOAP_FMAC4 soap_in_ns1__getResultResponse(struct soap*, const char*, struct ns1__getResultResponse *, const char*);

SOAP_FMAC3 struct ns1__getResultResponse * SOAP_FMAC4 soap_new_ns1__getResultResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getResultResponse(struct soap*, const struct ns1__getResultResponse *, const char*, const char*);

#ifndef soap_write_ns1__getResultResponse
#define soap_write_ns1__getResultResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getResultResponse(soap, data), 0) || soap_put_ns1__getResultResponse(soap, data, "ns1:getResultResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getResultResponse
#define soap_PUT_ns1__getResultResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getResultResponse(soap, data), 0) || soap_put_ns1__getResultResponse(soap, data, "ns1:getResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__getResultResponse
#define soap_PATCH_ns1__getResultResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getResultResponse(soap, data), 0) || soap_put_ns1__getResultResponse(soap, data, "ns1:getResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__getResultResponse
#define soap_POST_send_ns1__getResultResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getResultResponse(soap, data), 0) || soap_put_ns1__getResultResponse(soap, data, "ns1:getResultResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getResultResponse * SOAP_FMAC4 soap_get_ns1__getResultResponse(struct soap*, struct ns1__getResultResponse *, const char*, const char*);

#ifndef soap_read_ns1__getResultResponse
#define soap_read_ns1__getResultResponse(soap, data) ( ((data) ? (soap_default_ns1__getResultResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getResultResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getResultResponse
#define soap_GET_ns1__getResultResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getResultResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__getResultResponse
#define soap_POST_recv_ns1__getResultResponse(soap, data) ( soap_read_ns1__getResultResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getResult_DEFINED
#define SOAP_TYPE_ns1__getResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getResult(struct soap*, struct ns1__getResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getResult(struct soap*, const struct ns1__getResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getResult(struct soap*, const char*, int, const struct ns1__getResult *, const char*);
SOAP_FMAC3 struct ns1__getResult * SOAP_FMAC4 soap_in_ns1__getResult(struct soap*, const char*, struct ns1__getResult *, const char*);

SOAP_FMAC3 struct ns1__getResult * SOAP_FMAC4 soap_new_ns1__getResult(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getResult(struct soap*, const struct ns1__getResult *, const char*, const char*);

#ifndef soap_write_ns1__getResult
#define soap_write_ns1__getResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getResult(soap, data), 0) || soap_put_ns1__getResult(soap, data, "ns1:getResult", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getResult
#define soap_PUT_ns1__getResult(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getResult(soap, data), 0) || soap_put_ns1__getResult(soap, data, "ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__getResult
#define soap_PATCH_ns1__getResult(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getResult(soap, data), 0) || soap_put_ns1__getResult(soap, data, "ns1:getResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__getResult
#define soap_POST_send_ns1__getResult(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getResult(soap, data), 0) || soap_put_ns1__getResult(soap, data, "ns1:getResult", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getResult * SOAP_FMAC4 soap_get_ns1__getResult(struct soap*, struct ns1__getResult *, const char*, const char*);

#ifndef soap_read_ns1__getResult
#define soap_read_ns1__getResult(soap, data) ( ((data) ? (soap_default_ns1__getResult(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getResult(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getResult
#define soap_GET_ns1__getResult(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getResult(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__getResult
#define soap_POST_recv_ns1__getResult(soap, data) ( soap_read_ns1__getResult(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__randomResponse_DEFINED
#define SOAP_TYPE_ns1__randomResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__randomResponse(struct soap*, struct ns1__randomResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__randomResponse(struct soap*, const struct ns1__randomResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__randomResponse(struct soap*, const char*, int, const struct ns1__randomResponse *, const char*);
SOAP_FMAC3 struct ns1__randomResponse * SOAP_FMAC4 soap_in_ns1__randomResponse(struct soap*, const char*, struct ns1__randomResponse *, const char*);

SOAP_FMAC3 struct ns1__randomResponse * SOAP_FMAC4 soap_new_ns1__randomResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__randomResponse(struct soap*, const struct ns1__randomResponse *, const char*, const char*);

#ifndef soap_write_ns1__randomResponse
#define soap_write_ns1__randomResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__randomResponse(soap, data), 0) || soap_put_ns1__randomResponse(soap, data, "ns1:randomResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__randomResponse
#define soap_PUT_ns1__randomResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__randomResponse(soap, data), 0) || soap_put_ns1__randomResponse(soap, data, "ns1:randomResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__randomResponse
#define soap_PATCH_ns1__randomResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__randomResponse(soap, data), 0) || soap_put_ns1__randomResponse(soap, data, "ns1:randomResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__randomResponse
#define soap_POST_send_ns1__randomResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__randomResponse(soap, data), 0) || soap_put_ns1__randomResponse(soap, data, "ns1:randomResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__randomResponse * SOAP_FMAC4 soap_get_ns1__randomResponse(struct soap*, struct ns1__randomResponse *, const char*, const char*);

#ifndef soap_read_ns1__randomResponse
#define soap_read_ns1__randomResponse(soap, data) ( ((data) ? (soap_default_ns1__randomResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__randomResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__randomResponse
#define soap_GET_ns1__randomResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__randomResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__randomResponse
#define soap_POST_recv_ns1__randomResponse(soap, data) ( soap_read_ns1__randomResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__random_DEFINED
#define SOAP_TYPE_ns1__random_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__random(struct soap*, struct ns1__random *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__random(struct soap*, const struct ns1__random *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__random(struct soap*, const char*, int, const struct ns1__random *, const char*);
SOAP_FMAC3 struct ns1__random * SOAP_FMAC4 soap_in_ns1__random(struct soap*, const char*, struct ns1__random *, const char*);

SOAP_FMAC3 struct ns1__random * SOAP_FMAC4 soap_new_ns1__random(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__random(struct soap*, const struct ns1__random *, const char*, const char*);

#ifndef soap_write_ns1__random
#define soap_write_ns1__random(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__random(soap, data), 0) || soap_put_ns1__random(soap, data, "ns1:random", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__random
#define soap_PUT_ns1__random(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__random(soap, data), 0) || soap_put_ns1__random(soap, data, "ns1:random", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__random
#define soap_PATCH_ns1__random(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__random(soap, data), 0) || soap_put_ns1__random(soap, data, "ns1:random", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__random
#define soap_POST_send_ns1__random(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__random(soap, data), 0) || soap_put_ns1__random(soap, data, "ns1:random", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__random * SOAP_FMAC4 soap_get_ns1__random(struct soap*, struct ns1__random *, const char*, const char*);

#ifndef soap_read_ns1__random
#define soap_read_ns1__random(soap, data) ( ((data) ? (soap_default_ns1__random(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__random(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__random
#define soap_GET_ns1__random(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__random(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__random
#define soap_POST_recv_ns1__random(soap, data) ( soap_read_ns1__random(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__authSecAssertResponse_DEFINED
#define SOAP_TYPE_ns1__authSecAssertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__authSecAssertResponse(struct soap*, struct ns1__authSecAssertResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__authSecAssertResponse(struct soap*, const struct ns1__authSecAssertResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authSecAssertResponse(struct soap*, const char*, int, const struct ns1__authSecAssertResponse *, const char*);
SOAP_FMAC3 struct ns1__authSecAssertResponse * SOAP_FMAC4 soap_in_ns1__authSecAssertResponse(struct soap*, const char*, struct ns1__authSecAssertResponse *, const char*);

SOAP_FMAC3 struct ns1__authSecAssertResponse * SOAP_FMAC4 soap_new_ns1__authSecAssertResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__authSecAssertResponse(struct soap*, const struct ns1__authSecAssertResponse *, const char*, const char*);

#ifndef soap_write_ns1__authSecAssertResponse
#define soap_write_ns1__authSecAssertResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__authSecAssertResponse(soap, data), 0) || soap_put_ns1__authSecAssertResponse(soap, data, "ns1:authSecAssertResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__authSecAssertResponse
#define soap_PUT_ns1__authSecAssertResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__authSecAssertResponse(soap, data), 0) || soap_put_ns1__authSecAssertResponse(soap, data, "ns1:authSecAssertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__authSecAssertResponse
#define soap_PATCH_ns1__authSecAssertResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__authSecAssertResponse(soap, data), 0) || soap_put_ns1__authSecAssertResponse(soap, data, "ns1:authSecAssertResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__authSecAssertResponse
#define soap_POST_send_ns1__authSecAssertResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__authSecAssertResponse(soap, data), 0) || soap_put_ns1__authSecAssertResponse(soap, data, "ns1:authSecAssertResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__authSecAssertResponse * SOAP_FMAC4 soap_get_ns1__authSecAssertResponse(struct soap*, struct ns1__authSecAssertResponse *, const char*, const char*);

#ifndef soap_read_ns1__authSecAssertResponse
#define soap_read_ns1__authSecAssertResponse(soap, data) ( ((data) ? (soap_default_ns1__authSecAssertResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__authSecAssertResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__authSecAssertResponse
#define soap_GET_ns1__authSecAssertResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__authSecAssertResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__authSecAssertResponse
#define soap_POST_recv_ns1__authSecAssertResponse(soap, data) ( soap_read_ns1__authSecAssertResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__authSecAssert_DEFINED
#define SOAP_TYPE_ns1__authSecAssert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__authSecAssert(struct soap*, struct ns1__authSecAssert *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__authSecAssert(struct soap*, const struct ns1__authSecAssert *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__authSecAssert(struct soap*, const char*, int, const struct ns1__authSecAssert *, const char*);
SOAP_FMAC3 struct ns1__authSecAssert * SOAP_FMAC4 soap_in_ns1__authSecAssert(struct soap*, const char*, struct ns1__authSecAssert *, const char*);

SOAP_FMAC3 struct ns1__authSecAssert * SOAP_FMAC4 soap_new_ns1__authSecAssert(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__authSecAssert(struct soap*, const struct ns1__authSecAssert *, const char*, const char*);

#ifndef soap_write_ns1__authSecAssert
#define soap_write_ns1__authSecAssert(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__authSecAssert(soap, data), 0) || soap_put_ns1__authSecAssert(soap, data, "ns1:authSecAssert", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__authSecAssert
#define soap_PUT_ns1__authSecAssert(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__authSecAssert(soap, data), 0) || soap_put_ns1__authSecAssert(soap, data, "ns1:authSecAssert", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ns1__authSecAssert
#define soap_PATCH_ns1__authSecAssert(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__authSecAssert(soap, data), 0) || soap_put_ns1__authSecAssert(soap, data, "ns1:authSecAssert", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ns1__authSecAssert
#define soap_POST_send_ns1__authSecAssert(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__authSecAssert(soap, data), 0) || soap_put_ns1__authSecAssert(soap, data, "ns1:authSecAssert", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__authSecAssert * SOAP_FMAC4 soap_get_ns1__authSecAssert(struct soap*, struct ns1__authSecAssert *, const char*, const char*);

#ifndef soap_read_ns1__authSecAssert
#define soap_read_ns1__authSecAssert(soap, data) ( ((data) ? (soap_default_ns1__authSecAssert(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__authSecAssert(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__authSecAssert
#define soap_GET_ns1__authSecAssert(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__authSecAssert(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ns1__authSecAssert
#define soap_POST_recv_ns1__authSecAssert(soap, data) ( soap_read_ns1__authSecAssert(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__userDefineResponse_DEFINED
#define SOAP_TYPE_PointerTons1__userDefineResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userDefineResponse(struct soap*, struct ns1__userDefineResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userDefineResponse(struct soap*, const char *, int, struct ns1__userDefineResponse *const*, const char *);
SOAP_FMAC3 struct ns1__userDefineResponse ** SOAP_FMAC4 soap_in_PointerTons1__userDefineResponse(struct soap*, const char*, struct ns1__userDefineResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userDefineResponse(struct soap*, struct ns1__userDefineResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userDefineResponse ** SOAP_FMAC4 soap_get_PointerTons1__userDefineResponse(struct soap*, struct ns1__userDefineResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userDefine_DEFINED
#define SOAP_TYPE_PointerTons1__userDefine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userDefine(struct soap*, struct ns1__userDefine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userDefine(struct soap*, const char *, int, struct ns1__userDefine *const*, const char *);
SOAP_FMAC3 struct ns1__userDefine ** SOAP_FMAC4 soap_in_PointerTons1__userDefine(struct soap*, const char*, struct ns1__userDefine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userDefine(struct soap*, struct ns1__userDefine *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userDefine ** SOAP_FMAC4 soap_get_PointerTons1__userDefine(struct soap*, struct ns1__userDefine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userListGetResponse_DEFINED
#define SOAP_TYPE_PointerTons1__userListGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userListGetResponse(struct soap*, struct ns1__userListGetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userListGetResponse(struct soap*, const char *, int, struct ns1__userListGetResponse *const*, const char *);
SOAP_FMAC3 struct ns1__userListGetResponse ** SOAP_FMAC4 soap_in_PointerTons1__userListGetResponse(struct soap*, const char*, struct ns1__userListGetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userListGetResponse(struct soap*, struct ns1__userListGetResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userListGetResponse ** SOAP_FMAC4 soap_get_PointerTons1__userListGetResponse(struct soap*, struct ns1__userListGetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userListGet_DEFINED
#define SOAP_TYPE_PointerTons1__userListGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userListGet(struct soap*, struct ns1__userListGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userListGet(struct soap*, const char *, int, struct ns1__userListGet *const*, const char *);
SOAP_FMAC3 struct ns1__userListGet ** SOAP_FMAC4 soap_in_PointerTons1__userListGet(struct soap*, const char*, struct ns1__userListGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userListGet(struct soap*, struct ns1__userListGet *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userListGet ** SOAP_FMAC4 soap_get_PointerTons1__userListGet(struct soap*, struct ns1__userListGet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__verifyUserRNResponse_DEFINED
#define SOAP_TYPE_PointerTons1__verifyUserRNResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__verifyUserRNResponse(struct soap*, struct ns1__verifyUserRNResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__verifyUserRNResponse(struct soap*, const char *, int, struct ns1__verifyUserRNResponse *const*, const char *);
SOAP_FMAC3 struct ns1__verifyUserRNResponse ** SOAP_FMAC4 soap_in_PointerTons1__verifyUserRNResponse(struct soap*, const char*, struct ns1__verifyUserRNResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__verifyUserRNResponse(struct soap*, struct ns1__verifyUserRNResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__verifyUserRNResponse ** SOAP_FMAC4 soap_get_PointerTons1__verifyUserRNResponse(struct soap*, struct ns1__verifyUserRNResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__verifyUserRN_DEFINED
#define SOAP_TYPE_PointerTons1__verifyUserRN_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__verifyUserRN(struct soap*, struct ns1__verifyUserRN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__verifyUserRN(struct soap*, const char *, int, struct ns1__verifyUserRN *const*, const char *);
SOAP_FMAC3 struct ns1__verifyUserRN ** SOAP_FMAC4 soap_in_PointerTons1__verifyUserRN(struct soap*, const char*, struct ns1__verifyUserRN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__verifyUserRN(struct soap*, struct ns1__verifyUserRN *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__verifyUserRN ** SOAP_FMAC4 soap_get_PointerTons1__verifyUserRN(struct soap*, struct ns1__verifyUserRN **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userCancelResponse_DEFINED
#define SOAP_TYPE_PointerTons1__userCancelResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userCancelResponse(struct soap*, struct ns1__userCancelResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userCancelResponse(struct soap*, const char *, int, struct ns1__userCancelResponse *const*, const char *);
SOAP_FMAC3 struct ns1__userCancelResponse ** SOAP_FMAC4 soap_in_PointerTons1__userCancelResponse(struct soap*, const char*, struct ns1__userCancelResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userCancelResponse(struct soap*, struct ns1__userCancelResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userCancelResponse ** SOAP_FMAC4 soap_get_PointerTons1__userCancelResponse(struct soap*, struct ns1__userCancelResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userCancel_DEFINED
#define SOAP_TYPE_PointerTons1__userCancel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userCancel(struct soap*, struct ns1__userCancel *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userCancel(struct soap*, const char *, int, struct ns1__userCancel *const*, const char *);
SOAP_FMAC3 struct ns1__userCancel ** SOAP_FMAC4 soap_in_PointerTons1__userCancel(struct soap*, const char*, struct ns1__userCancel **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userCancel(struct soap*, struct ns1__userCancel *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userCancel ** SOAP_FMAC4 soap_get_PointerTons1__userCancel(struct soap*, struct ns1__userCancel **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__accessUnitGetResponse_DEFINED
#define SOAP_TYPE_PointerTons1__accessUnitGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__accessUnitGetResponse(struct soap*, struct ns1__accessUnitGetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__accessUnitGetResponse(struct soap*, const char *, int, struct ns1__accessUnitGetResponse *const*, const char *);
SOAP_FMAC3 struct ns1__accessUnitGetResponse ** SOAP_FMAC4 soap_in_PointerTons1__accessUnitGetResponse(struct soap*, const char*, struct ns1__accessUnitGetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__accessUnitGetResponse(struct soap*, struct ns1__accessUnitGetResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__accessUnitGetResponse ** SOAP_FMAC4 soap_get_PointerTons1__accessUnitGetResponse(struct soap*, struct ns1__accessUnitGetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__accessUnitGet_DEFINED
#define SOAP_TYPE_PointerTons1__accessUnitGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__accessUnitGet(struct soap*, struct ns1__accessUnitGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__accessUnitGet(struct soap*, const char *, int, struct ns1__accessUnitGet *const*, const char *);
SOAP_FMAC3 struct ns1__accessUnitGet ** SOAP_FMAC4 soap_in_PointerTons1__accessUnitGet(struct soap*, const char*, struct ns1__accessUnitGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__accessUnitGet(struct soap*, struct ns1__accessUnitGet *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__accessUnitGet ** SOAP_FMAC4 soap_get_PointerTons1__accessUnitGet(struct soap*, struct ns1__accessUnitGet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userRNCertGetResponse_DEFINED
#define SOAP_TYPE_PointerTons1__userRNCertGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userRNCertGetResponse(struct soap*, struct ns1__userRNCertGetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userRNCertGetResponse(struct soap*, const char *, int, struct ns1__userRNCertGetResponse *const*, const char *);
SOAP_FMAC3 struct ns1__userRNCertGetResponse ** SOAP_FMAC4 soap_in_PointerTons1__userRNCertGetResponse(struct soap*, const char*, struct ns1__userRNCertGetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userRNCertGetResponse(struct soap*, struct ns1__userRNCertGetResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userRNCertGetResponse ** SOAP_FMAC4 soap_get_PointerTons1__userRNCertGetResponse(struct soap*, struct ns1__userRNCertGetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userRNCertGet_DEFINED
#define SOAP_TYPE_PointerTons1__userRNCertGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userRNCertGet(struct soap*, struct ns1__userRNCertGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userRNCertGet(struct soap*, const char *, int, struct ns1__userRNCertGet *const*, const char *);
SOAP_FMAC3 struct ns1__userRNCertGet ** SOAP_FMAC4 soap_in_PointerTons1__userRNCertGet(struct soap*, const char*, struct ns1__userRNCertGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userRNCertGet(struct soap*, struct ns1__userRNCertGet *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userRNCertGet ** SOAP_FMAC4 soap_get_PointerTons1__userRNCertGet(struct soap*, struct ns1__userRNCertGet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userModifyResponse_DEFINED
#define SOAP_TYPE_PointerTons1__userModifyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userModifyResponse(struct soap*, struct ns1__userModifyResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userModifyResponse(struct soap*, const char *, int, struct ns1__userModifyResponse *const*, const char *);
SOAP_FMAC3 struct ns1__userModifyResponse ** SOAP_FMAC4 soap_in_PointerTons1__userModifyResponse(struct soap*, const char*, struct ns1__userModifyResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userModifyResponse(struct soap*, struct ns1__userModifyResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userModifyResponse ** SOAP_FMAC4 soap_get_PointerTons1__userModifyResponse(struct soap*, struct ns1__userModifyResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userModify_DEFINED
#define SOAP_TYPE_PointerTons1__userModify_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userModify(struct soap*, struct ns1__userModify *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userModify(struct soap*, const char *, int, struct ns1__userModify *const*, const char *);
SOAP_FMAC3 struct ns1__userModify ** SOAP_FMAC4 soap_in_PointerTons1__userModify(struct soap*, const char*, struct ns1__userModify **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userModify(struct soap*, struct ns1__userModify *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userModify ** SOAP_FMAC4 soap_get_PointerTons1__userModify(struct soap*, struct ns1__userModify **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userVIDSetResponse_DEFINED
#define SOAP_TYPE_PointerTons1__userVIDSetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userVIDSetResponse(struct soap*, struct ns1__userVIDSetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userVIDSetResponse(struct soap*, const char *, int, struct ns1__userVIDSetResponse *const*, const char *);
SOAP_FMAC3 struct ns1__userVIDSetResponse ** SOAP_FMAC4 soap_in_PointerTons1__userVIDSetResponse(struct soap*, const char*, struct ns1__userVIDSetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userVIDSetResponse(struct soap*, struct ns1__userVIDSetResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userVIDSetResponse ** SOAP_FMAC4 soap_get_PointerTons1__userVIDSetResponse(struct soap*, struct ns1__userVIDSetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__userVIDSet_DEFINED
#define SOAP_TYPE_PointerTons1__userVIDSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__userVIDSet(struct soap*, struct ns1__userVIDSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__userVIDSet(struct soap*, const char *, int, struct ns1__userVIDSet *const*, const char *);
SOAP_FMAC3 struct ns1__userVIDSet ** SOAP_FMAC4 soap_in_PointerTons1__userVIDSet(struct soap*, const char*, struct ns1__userVIDSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__userVIDSet(struct soap*, struct ns1__userVIDSet *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__userVIDSet ** SOAP_FMAC4 soap_get_PointerTons1__userVIDSet(struct soap*, struct ns1__userVIDSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__challengeResponse_DEFINED
#define SOAP_TYPE_PointerTons1__challengeResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__challengeResponse(struct soap*, struct ns1__challengeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__challengeResponse(struct soap*, const char *, int, struct ns1__challengeResponse *const*, const char *);
SOAP_FMAC3 struct ns1__challengeResponse ** SOAP_FMAC4 soap_in_PointerTons1__challengeResponse(struct soap*, const char*, struct ns1__challengeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__challengeResponse(struct soap*, struct ns1__challengeResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__challengeResponse ** SOAP_FMAC4 soap_get_PointerTons1__challengeResponse(struct soap*, struct ns1__challengeResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__challenge_DEFINED
#define SOAP_TYPE_PointerTons1__challenge_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__challenge(struct soap*, struct ns1__challenge *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__challenge(struct soap*, const char *, int, struct ns1__challenge *const*, const char *);
SOAP_FMAC3 struct ns1__challenge ** SOAP_FMAC4 soap_in_PointerTons1__challenge(struct soap*, const char*, struct ns1__challenge **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__challenge(struct soap*, struct ns1__challenge *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__challenge ** SOAP_FMAC4 soap_get_PointerTons1__challenge(struct soap*, struct ns1__challenge **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getPermissionByIdResponse_DEFINED
#define SOAP_TYPE_PointerTons1__getPermissionByIdResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getPermissionByIdResponse(struct soap*, struct ns1__getPermissionByIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getPermissionByIdResponse(struct soap*, const char *, int, struct ns1__getPermissionByIdResponse *const*, const char *);
SOAP_FMAC3 struct ns1__getPermissionByIdResponse ** SOAP_FMAC4 soap_in_PointerTons1__getPermissionByIdResponse(struct soap*, const char*, struct ns1__getPermissionByIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getPermissionByIdResponse(struct soap*, struct ns1__getPermissionByIdResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__getPermissionByIdResponse ** SOAP_FMAC4 soap_get_PointerTons1__getPermissionByIdResponse(struct soap*, struct ns1__getPermissionByIdResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getPermissionById_DEFINED
#define SOAP_TYPE_PointerTons1__getPermissionById_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getPermissionById(struct soap*, struct ns1__getPermissionById *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getPermissionById(struct soap*, const char *, int, struct ns1__getPermissionById *const*, const char *);
SOAP_FMAC3 struct ns1__getPermissionById ** SOAP_FMAC4 soap_in_PointerTons1__getPermissionById(struct soap*, const char*, struct ns1__getPermissionById **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getPermissionById(struct soap*, struct ns1__getPermissionById *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__getPermissionById ** SOAP_FMAC4 soap_get_PointerTons1__getPermissionById(struct soap*, struct ns1__getPermissionById **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__randomResponse_DEFINED
#define SOAP_TYPE_PointerTons1__randomResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__randomResponse(struct soap*, struct ns1__randomResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__randomResponse(struct soap*, const char *, int, struct ns1__randomResponse *const*, const char *);
SOAP_FMAC3 struct ns1__randomResponse ** SOAP_FMAC4 soap_in_PointerTons1__randomResponse(struct soap*, const char*, struct ns1__randomResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__randomResponse(struct soap*, struct ns1__randomResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__randomResponse ** SOAP_FMAC4 soap_get_PointerTons1__randomResponse(struct soap*, struct ns1__randomResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__random_DEFINED
#define SOAP_TYPE_PointerTons1__random_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__random(struct soap*, struct ns1__random *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__random(struct soap*, const char *, int, struct ns1__random *const*, const char *);
SOAP_FMAC3 struct ns1__random ** SOAP_FMAC4 soap_in_PointerTons1__random(struct soap*, const char*, struct ns1__random **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__random(struct soap*, struct ns1__random *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__random ** SOAP_FMAC4 soap_get_PointerTons1__random(struct soap*, struct ns1__random **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getResultResponse_DEFINED
#define SOAP_TYPE_PointerTons1__getResultResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getResultResponse(struct soap*, struct ns1__getResultResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getResultResponse(struct soap*, const char *, int, struct ns1__getResultResponse *const*, const char *);
SOAP_FMAC3 struct ns1__getResultResponse ** SOAP_FMAC4 soap_in_PointerTons1__getResultResponse(struct soap*, const char*, struct ns1__getResultResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getResultResponse(struct soap*, struct ns1__getResultResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__getResultResponse ** SOAP_FMAC4 soap_get_PointerTons1__getResultResponse(struct soap*, struct ns1__getResultResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getResult_DEFINED
#define SOAP_TYPE_PointerTons1__getResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getResult(struct soap*, struct ns1__getResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getResult(struct soap*, const char *, int, struct ns1__getResult *const*, const char *);
SOAP_FMAC3 struct ns1__getResult ** SOAP_FMAC4 soap_in_PointerTons1__getResult(struct soap*, const char*, struct ns1__getResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getResult(struct soap*, struct ns1__getResult *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__getResult ** SOAP_FMAC4 soap_get_PointerTons1__getResult(struct soap*, struct ns1__getResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__authSecAssertResponse_DEFINED
#define SOAP_TYPE_PointerTons1__authSecAssertResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authSecAssertResponse(struct soap*, struct ns1__authSecAssertResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authSecAssertResponse(struct soap*, const char *, int, struct ns1__authSecAssertResponse *const*, const char *);
SOAP_FMAC3 struct ns1__authSecAssertResponse ** SOAP_FMAC4 soap_in_PointerTons1__authSecAssertResponse(struct soap*, const char*, struct ns1__authSecAssertResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authSecAssertResponse(struct soap*, struct ns1__authSecAssertResponse *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__authSecAssertResponse ** SOAP_FMAC4 soap_get_PointerTons1__authSecAssertResponse(struct soap*, struct ns1__authSecAssertResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__authSecAssert_DEFINED
#define SOAP_TYPE_PointerTons1__authSecAssert_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__authSecAssert(struct soap*, struct ns1__authSecAssert *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__authSecAssert(struct soap*, const char *, int, struct ns1__authSecAssert *const*, const char *);
SOAP_FMAC3 struct ns1__authSecAssert ** SOAP_FMAC4 soap_in_PointerTons1__authSecAssert(struct soap*, const char*, struct ns1__authSecAssert **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__authSecAssert(struct soap*, struct ns1__authSecAssert *const*, const char*, const char*);
SOAP_FMAC3 struct ns1__authSecAssert ** SOAP_FMAC4 soap_get_PointerTons1__authSecAssert(struct soap*, struct ns1__authSecAssert **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__QName
#define soap_PATCH__QName(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_string
#define soap_PATCH_string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifdef __cplusplus
}
#endif

#endif

/* End of soapH.h */
